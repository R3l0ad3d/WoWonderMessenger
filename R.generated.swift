//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()
  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 250 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation:    Unblock
      ///
      /// Key:    Unblock
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var unblock: RswiftResources.StringResource { .init(key: "   Unblock", tableName: "Localizable", source: source, developmentValue: "   Unblock", comment: nil) }

      /// en translation:  ALL
      ///
      /// Key: ALL
      ///
      /// Locales: en, tr
      var alL: RswiftResources.StringResource { .init(key: "ALL", tableName: "Localizable", source: source, developmentValue: " ALL", comment: nil) }

      /// en translation: About
      ///
      /// Key: About
      ///
      /// Locales: en, tr
      var about: RswiftResources.StringResource { .init(key: "About", tableName: "Localizable", source: source, developmentValue: "About", comment: nil) }

      /// en translation: About me
      ///
      /// Key: About me
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var aboutMe: RswiftResources.StringResource { .init(key: "About me", tableName: "Localizable", source: source, developmentValue: "About me", comment: nil) }

      /// en translation: Account and Profile
      ///
      /// Key: Account and Profile
      ///
      /// Locales: en, tr
      var accountAndProfile: RswiftResources.StringResource { .init(key: "Account and Profile", tableName: "Localizable", source: source, developmentValue: "Account and Profile", comment: nil) }

      /// en translation: Add
      ///
      /// Key: Add
      ///
      /// Locales: en, tr
      var add: RswiftResources.StringResource { .init(key: "Add", tableName: "Localizable", source: source, developmentValue: "Add", comment: nil) }

      /// en translation: Add Participants
      ///
      /// Key: Add Participants
      ///
      /// Locales: en, tr
      var addParticipants: RswiftResources.StringResource { .init(key: "Add Participants", tableName: "Localizable", source: source, developmentValue: "Add Participants", comment: nil) }

      /// en translation: Add code number
      ///
      /// Key: Add code number
      ///
      /// Locales: en, tr
      var addCodeNumber: RswiftResources.StringResource { .init(key: "Add code number", tableName: "Localizable", source: source, developmentValue: "Add code number", comment: nil) }

      /// en translation: Add new Story
      ///
      /// Key: Add new Story
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var addNewStory: RswiftResources.StringResource { .init(key: "Add new Story", tableName: "Localizable", source: source, developmentValue: "Add new Story", comment: nil) }

      /// en translation: AddFriend
      ///
      /// Key: AddFriend
      ///
      /// Locales: en, tr
      var addFriend: RswiftResources.StringResource { .init(key: "AddFriend", tableName: "Localizable", source: source, developmentValue: "AddFriend", comment: nil) }

      /// en translation: Added to favorite
      ///
      /// Key: Added to favorite
      ///
      /// Locales: en, tr
      var addedToFavorite: RswiftResources.StringResource { .init(key: "Added to favorite", tableName: "Localizable", source: source, developmentValue: "Added to favorite", comment: nil) }

      /// en translation: All
      ///
      /// Key: All
      ///
      /// Locales: en
      var all: RswiftResources.StringResource { .init(key: "All", tableName: "Localizable", source: source, developmentValue: "All", comment: nil) }

      /// en translation: Answer
      ///
      /// Key: Answer
      ///
      /// Locales: en, tr
      var answer: RswiftResources.StringResource { .init(key: "Answer", tableName: "Localizable", source: source, developmentValue: "Answer", comment: nil) }

      /// en translation: Application will close to change the language
      ///
      /// Key: Application will close to change the language
      ///
      /// Locales: en, tr
      var applicationWillCloseToChangeTheLanguage: RswiftResources.StringResource { .init(key: "Application will close to change the language", tableName: "Localizable", source: source, developmentValue: "Application will close to change the language", comment: nil) }

      /// en translation: Apply Filter
      ///
      /// Key: Apply Filter
      ///
      /// Locales: en, tr
      var applyFilter: RswiftResources.StringResource { .init(key: "Apply Filter", tableName: "Localizable", source: source, developmentValue: "Apply Filter", comment: nil) }

      /// en translation: Are you sure you want to delete the account from WoWonder Messenger
      ///
      /// Key: Are you sure you want to delete the account from WoWonder Messenger
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var areYouSureYouWantToDeleteTheAccountFromWoWonderMessenger: RswiftResources.StringResource { .init(key: "Are you sure you want to delete the account from WoWonder Messenger", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to delete the account from WoWonder Messenger", comment: nil) }

      /// ru translation: Are you sure you want to logout?
      ///
      /// Key: Are you sure you want to logout?
      ///
      /// Locales: ru, it, ar-001, fr, de, es
      var areYouSureYouWantToLogout: RswiftResources.StringResource { .init(key: "Are you sure you want to logout?", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Block
      ///
      /// Key: Block
      ///
      /// Locales: en, tr
      var block: RswiftResources.StringResource { .init(key: "Block", tableName: "Localizable", source: source, developmentValue: "Block", comment: nil) }

      /// en translation: Block User
      ///
      /// Key: Block User
      ///
      /// Locales: en, tr
      var blockUser: RswiftResources.StringResource { .init(key: "Block User", tableName: "Localizable", source: source, developmentValue: "Block User", comment: nil) }

      /// en translation: Block User List
      ///
      /// Key: Block User List
      ///
      /// Locales: en, tr
      var blockUserList: RswiftResources.StringResource { .init(key: "Block User List", tableName: "Localizable", source: source, developmentValue: "Block User List", comment: nil) }

      /// en translation: Blocked Users
      ///
      /// Key: Blocked Users
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var blockedUsers: RswiftResources.StringResource { .init(key: "Blocked Users", tableName: "Localizable", source: source, developmentValue: "Blocked Users", comment: nil) }

      /// en translation: CALLS
      ///
      /// Key: CALLS
      ///
      /// Locales: en, tr
      var callS: RswiftResources.StringResource { .init(key: "CALLS", tableName: "Localizable", source: source, developmentValue: "CALLS", comment: nil) }

      /// en translation: CANCEL
      ///
      /// Key: CANCEL
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var canceL: RswiftResources.StringResource { .init(key: "CANCEL", tableName: "Localizable", source: source, developmentValue: "CANCEL", comment: nil) }

      /// en translation: CHATS
      ///
      /// Key: CHATS
      ///
      /// Locales: en, tr
      var chatS: RswiftResources.StringResource { .init(key: "CHATS", tableName: "Localizable", source: source, developmentValue: "CHATS", comment: nil) }

      /// en translation: CLOSE
      ///
      /// Key: CLOSE
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var closE: RswiftResources.StringResource { .init(key: "CLOSE", tableName: "Localizable", source: source, developmentValue: "CLOSE", comment: nil) }

      /// en translation: Call Logs Cleared
      ///
      /// Key: Call Logs Cleared
      ///
      /// Locales: en, tr
      var callLogsCleared: RswiftResources.StringResource { .init(key: "Call Logs Cleared", tableName: "Localizable", source: source, developmentValue: "Call Logs Cleared", comment: nil) }

      /// en translation: Calling
      ///
      /// Key: Calling
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var calling: RswiftResources.StringResource { .init(key: "Calling", tableName: "Localizable", source: source, developmentValue: "Calling", comment: nil) }

      /// en translation: Camera
      ///
      /// Key: Camera
      ///
      /// Locales: en, tr
      var camera: RswiftResources.StringResource { .init(key: "Camera", tableName: "Localizable", source: source, developmentValue: "Camera", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Cancel
      ///
      /// Locales: en, tr
      var cancel: RswiftResources.StringResource { .init(key: "Cancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Change Password
      ///
      /// Key: Change Password
      ///
      /// Locales: en, tr
      var changePassword: RswiftResources.StringResource { .init(key: "Change Password", tableName: "Localizable", source: source, developmentValue: "Change Password", comment: nil) }

      /// en translation: Change your password
      ///
      /// Key: Change your password
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var changeYourPassword: RswiftResources.StringResource { .init(key: "Change your password", tableName: "Localizable", source: source, developmentValue: "Change your password", comment: nil) }

      /// en translation: Check your email
      ///
      /// Key: Check your email
      ///
      /// Locales: en, tr
      var checkYourEmail: RswiftResources.StringResource { .init(key: "Check your email", tableName: "Localizable", source: source, developmentValue: "Check your email", comment: nil) }

      /// ru translation: Clear call log
      ///
      /// Key: Clear call log
      ///
      /// Locales: ru, it, ar-001, fr, de, es
      var clearCallLog: RswiftResources.StringResource { .init(key: "Clear call log", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Click the link in the email to reset your password.
      ///
      /// Key: Click the link in the email to reset your password.
      ///
      /// Locales: en, tr
      var clickTheLinkInTheEmailToResetYourPassword: RswiftResources.StringResource { .init(key: "Click the link in the email to reset your password.", tableName: "Localizable", source: source, developmentValue: "Click the link in the email to reset your password.", comment: nil) }

      /// en translation: Conversation Tones
      ///
      /// Key: Conversation Tones
      ///
      /// Locales: en
      var conversationTones: RswiftResources.StringResource { .init(key: "Conversation Tones", tableName: "Localizable", source: source, developmentValue: "Conversation Tones", comment: nil) }

      /// en translation: Copied to clipboard
      ///
      /// Key: Copied to clipboard
      ///
      /// Locales: en, tr
      var copiedToClipboard: RswiftResources.StringResource { .init(key: "Copied to clipboard", tableName: "Localizable", source: source, developmentValue: "Copied to clipboard", comment: nil) }

      /// en translation: Copy
      ///
      /// Key: Copy
      ///
      /// Locales: en, tr
      var copy: RswiftResources.StringResource { .init(key: "Copy", tableName: "Localizable", source: source, developmentValue: "Copy", comment: nil) }

      /// en translation: Copy link to profile
      ///
      /// Key: Copy link to profile
      ///
      /// Locales: en, tr
      var copyLinkToProfile: RswiftResources.StringResource { .init(key: "Copy link to profile", tableName: "Localizable", source: source, developmentValue: "Copy link to profile", comment: nil) }

      /// en translation: Create Group
      ///
      /// Key: Create Group
      ///
      /// Locales: en, tr
      var createGroup: RswiftResources.StringResource { .init(key: "Create Group", tableName: "Localizable", source: source, developmentValue: "Create Group", comment: nil) }

      /// en translation: Current Password
      ///
      /// Key: Current Password
      ///
      /// Locales: en, tr
      var currentPassword: RswiftResources.StringResource { .init(key: "Current Password", tableName: "Localizable", source: source, developmentValue: "Current Password", comment: nil) }

      /// en translation: Dark mode
      ///
      /// Key: Dark mode
      ///
      /// Locales: en, tr
      var darkMode: RswiftResources.StringResource { .init(key: "Dark mode", tableName: "Localizable", source: source, developmentValue: "Dark mode", comment: nil) }

      /// en translation: Decline
      ///
      /// Key: Decline
      ///
      /// Locales: en, tr
      var decline: RswiftResources.StringResource { .init(key: "Decline", tableName: "Localizable", source: source, developmentValue: "Decline", comment: nil) }

      /// en translation: Delete
      ///
      /// Key: Delete
      ///
      /// Locales: en, tr
      var delete: RswiftResources.StringResource { .init(key: "Delete", tableName: "Localizable", source: source, developmentValue: "Delete", comment: nil) }

      /// en translation: Delete Account
      ///
      /// Key: Delete Account
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var deleteAccount: RswiftResources.StringResource { .init(key: "Delete Account", tableName: "Localizable", source: source, developmentValue: "Delete Account", comment: nil) }

      /// en translation: Delete Group
      ///
      /// Key: Delete Group
      ///
      /// Locales: en, tr
      var deleteGroup: RswiftResources.StringResource { .init(key: "Delete Group", tableName: "Localizable", source: source, developmentValue: "Delete Group", comment: nil) }

      /// en translation: Delete Message
      ///
      /// Key: Delete Message
      ///
      /// Locales: en, tr
      var deleteMessage: RswiftResources.StringResource { .init(key: "Delete Message", tableName: "Localizable", source: source, developmentValue: "Delete Message", comment: nil) }

      /// en translation: Disable
      ///
      /// Key: Disable
      ///
      /// Locales: en, tr
      var disable: RswiftResources.StringResource { .init(key: "Disable", tableName: "Localizable", source: source, developmentValue: "Disable", comment: nil) }

      /// en translation: Display
      ///
      /// Key: Display
      ///
      /// Locales: en, tr
      var display: RswiftResources.StringResource { .init(key: "Display", tableName: "Localizable", source: source, developmentValue: "Display", comment: nil) }

      /// en translation: Display your app language
      ///
      /// Key: Display your app language
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var displayYourAppLanguage: RswiftResources.StringResource { .init(key: "Display your app language", tableName: "Localizable", source: source, developmentValue: "Display your app language", comment: nil) }

      /// en translation: Don't worry type your email here and will will recover it for you.
      ///
      /// Key: Don't worry type your email here and will will recover it for you.
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var donTWorryTypeYourEmailHereAndWillWillRecoverItForYou: RswiftResources.StringResource { .init(key: "Don't worry type your email here and will will recover it for you.", tableName: "Localizable", source: source, developmentValue: "Don't worry type your email here and will will recover it for you.", comment: nil) }

      /// en translation: Done
      ///
      /// Key: Done
      ///
      /// Locales: en, tr
      var done: RswiftResources.StringResource { .init(key: "Done", tableName: "Localizable", source: source, developmentValue: "Done", comment: nil) }

      /// en translation: Edit Profile
      ///
      /// Key: Edit Profile
      ///
      /// Locales: en, tr
      var editProfile: RswiftResources.StringResource { .init(key: "Edit Profile", tableName: "Localizable", source: source, developmentValue: "Edit Profile", comment: nil) }

      /// en translation: Edit Profile and avatar
      ///
      /// Key: Edit Profile and avatar
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var editProfileAndAvatar: RswiftResources.StringResource { .init(key: "Edit Profile and avatar", tableName: "Localizable", source: source, developmentValue: "Edit Profile and avatar", comment: nil) }

      /// en translation: Email is badly formatted.
      ///
      /// Key: Email is badly formatted.
      ///
      /// Locales: en, tr
      var emailIsBadlyFormatted: RswiftResources.StringResource { .init(key: "Email is badly formatted.", tableName: "Localizable", source: source, developmentValue: "Email is badly formatted.", comment: nil) }

      /// en translation: Enable
      ///
      /// Key: Enable
      ///
      /// Locales: en, tr
      var enable: RswiftResources.StringResource { .init(key: "Enable", tableName: "Localizable", source: source, developmentValue: "Enable", comment: nil) }

      /// en translation: Exit Group
      ///
      /// Key: Exit Group
      ///
      /// Locales: en, tr
      var exitGroup: RswiftResources.StringResource { .init(key: "Exit Group", tableName: "Localizable", source: source, developmentValue: "Exit Group", comment: nil) }

      /// en translation: FEMALE
      ///
      /// Key: FAMALE
      ///
      /// Locales: en, tr
      var famalE: RswiftResources.StringResource { .init(key: "FAMALE", tableName: "Localizable", source: source, developmentValue: "FEMALE", comment: nil) }

      /// en translation: Facebook
      ///
      /// Key: Facebook
      ///
      /// Locales: en, tr
      var facebook: RswiftResources.StringResource { .init(key: "Facebook", tableName: "Localizable", source: source, developmentValue: "Facebook", comment: nil) }

      /// en translation: Fast so we can take you to our space
      ///
      /// Key: Fast so we can take you to our space
      ///
      /// Locales: en, tr
      var fastSoWeCanTakeYouToOurSpace: RswiftResources.StringResource { .init(key: "Fast so we can take you to our space", tableName: "Localizable", source: source, developmentValue: "Fast so we can take you to our space", comment: nil) }

      /// en translation: Favorite
      ///
      /// Key: Favorite
      ///
      /// Locales: en, tr
      var favorite: RswiftResources.StringResource { .init(key: "Favorite", tableName: "Localizable", source: source, developmentValue: "Favorite", comment: nil) }

      /// en translation: Female
      ///
      /// Key: Female
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var female: RswiftResources.StringResource { .init(key: "Female", tableName: "Localizable", source: source, developmentValue: "Female", comment: nil) }

      /// en translation: File
      ///
      /// Key: File
      ///
      /// Locales: en, tr
      var file: RswiftResources.StringResource { .init(key: "File", tableName: "Localizable", source: source, developmentValue: "File", comment: nil) }

      /// en translation: Find all invite request
      ///
      /// Key: Find all invite request
      ///
      /// Locales: en, tr
      var findAllInviteRequest: RswiftResources.StringResource { .init(key: "Find all invite request", tableName: "Localizable", source: source, developmentValue: "Find all invite request", comment: nil) }

      /// en translation: Find new friends and contacts
      ///
      /// Key: Find new friends and contacts
      ///
      /// Locales: en, tr
      var findNewFriendsAndContacts: RswiftResources.StringResource { .init(key: "Find new friends and contacts", tableName: "Localizable", source: source, developmentValue: "Find new friends and contacts", comment: nil) }

      /// en translation: First Name
      ///
      /// Key: First Name
      ///
      /// Locales: en, tr
      var firstName: RswiftResources.StringResource { .init(key: "First Name", tableName: "Localizable", source: source, developmentValue: "First Name", comment: nil) }

      /// en translation: Follow Request
      ///
      /// Key: Follow Request
      ///
      /// Locales: en, tr
      var followRequest: RswiftResources.StringResource { .init(key: "Follow Request", tableName: "Localizable", source: source, developmentValue: "Follow Request", comment: nil) }

      /// en translation: Followers
      ///
      /// Key: Followers
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var followers: RswiftResources.StringResource { .init(key: "Followers", tableName: "Localizable", source: source, developmentValue: "Followers", comment: nil) }

      /// ru translation: Following
      ///
      /// Key: Following
      ///
      /// Locales: ru, it, ar-001, fr, de, es
      var following: RswiftResources.StringResource { .init(key: "Following", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Forward
      ///
      /// Key: Forward
      ///
      /// Locales: en, tr
      var forward: RswiftResources.StringResource { .init(key: "Forward", tableName: "Localizable", source: source, developmentValue: "Forward", comment: nil) }

      /// en translation: Friends
      ///
      /// Key: Friends
      ///
      /// Locales: en, tr
      var friends: RswiftResources.StringResource { .init(key: "Friends", tableName: "Localizable", source: source, developmentValue: "Friends", comment: nil) }

      /// en translation: GIF
      ///
      /// Key: GIF
      ///
      /// Locales: en, tr
      var giF: RswiftResources.StringResource { .init(key: "GIF", tableName: "Localizable", source: source, developmentValue: "GIF", comment: nil) }

      /// en translation: GROUPS
      ///
      /// Key: GROUPS
      ///
      /// Locales: en, tr
      var groupS: RswiftResources.StringResource { .init(key: "GROUPS", tableName: "Localizable", source: source, developmentValue: "GROUPS", comment: nil) }

      /// en translation: Gallery
      ///
      /// Key: Gallery
      ///
      /// Locales: en, tr
      var gallery: RswiftResources.StringResource { .init(key: "Gallery", tableName: "Localizable", source: source, developmentValue: "Gallery", comment: nil) }

      /// en translation: General
      ///
      /// Key: General
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var general: RswiftResources.StringResource { .init(key: "General", tableName: "Localizable", source: source, developmentValue: "General", comment: nil) }

      /// en translation: Get notifications when you receive messages
      ///
      /// Key: Get notifications when you receive messages
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var getNotificationsWhenYouReceiveMessages: RswiftResources.StringResource { .init(key: "Get notifications when you receive messages", tableName: "Localizable", source: source, developmentValue: "Get notifications when you receive messages", comment: nil) }

      /// en translation: Gif
      ///
      /// Key: Gif
      ///
      /// Locales: en, tr
      var gif: RswiftResources.StringResource { .init(key: "Gif", tableName: "Localizable", source: source, developmentValue: "Gif", comment: nil) }

      /// en translation: Group Name
      ///
      /// Key: Group Name
      ///
      /// Locales: en, tr
      var groupName: RswiftResources.StringResource { .init(key: "Group Name", tableName: "Localizable", source: source, developmentValue: "Group Name", comment: nil) }

      /// en translation: Group Request
      ///
      /// Key: Group Request
      ///
      /// Locales: en, tr
      var groupRequest: RswiftResources.StringResource { .init(key: "Group Request", tableName: "Localizable", source: source, developmentValue: "Group Request", comment: nil) }

      /// en translation: Hang Up
      ///
      /// Key: Hang Up
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var hangUp: RswiftResources.StringResource { .init(key: "Hang Up", tableName: "Localizable", source: source, developmentValue: "Hang Up", comment: nil) }

      /// en translation: Help
      ///
      /// Key: Help
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var help: RswiftResources.StringResource { .init(key: "Help", tableName: "Localizable", source: source, developmentValue: "Help", comment: nil) }

      /// en translation: Hi! there i am using WoWonder Messenger
      ///
      /// Key: Hi! there i am using WoWonder Messenger
      ///
      /// Locales: en, tr
      var hiThereIAmUsingWoWonderMessenger: RswiftResources.StringResource { .init(key: "Hi! there i am using WoWonder Messenger", tableName: "Localizable", source: source, developmentValue: "Hi! there i am using WoWonder Messenger", comment: nil) }

      /// en translation: I agree to the terms and conditions
      ///
      /// Key: I agree to the terms and conditions
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var iAgreeToTheTermsAndConditions: RswiftResources.StringResource { .init(key: "I agree to the terms and conditions", tableName: "Localizable", source: source, developmentValue: "I agree to the terms and conditions", comment: nil) }

      /// en translation: If you forgot your password, you can reset it from here.
      ///
      /// Key: If you forgot your password, you can reset it from here.
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var ifYouForgotYourPasswordYouCanResetItFromHere: RswiftResources.StringResource { .init(key: "If you forgot your password, you can reset it from here.", tableName: "Localizable", source: source, developmentValue: "If you forgot your password, you can reset it from here.", comment: nil) }

      /// en translation: Image Gallery
      ///
      /// Key: Image Gallery
      ///
      /// Locales: en, tr
      var imageGallery: RswiftResources.StringResource { .init(key: "Image Gallery", tableName: "Localizable", source: source, developmentValue: "Image Gallery", comment: nil) }

      /// en translation: Internet Error
      ///
      /// Key: Internet Error
      ///
      /// Locales: en, tr
      var internetError: RswiftResources.StringResource { .init(key: "Internet Error", tableName: "Localizable", source: source, developmentValue: "Internet Error", comment: nil) }

      /// en translation: Internet not connected, please check your internet connection.
      ///
      /// Key: Internet not connected, please check your internet connection.
      ///
      /// Locales: en, tr
      var internetNotConnectedPleaseCheckYourInternetConnection: RswiftResources.StringResource { .init(key: "Internet not connected, please check your internet connection.", tableName: "Localizable", source: source, developmentValue: "Internet not connected, please check your internet connection.", comment: nil) }

      /// en translation: Invite Friends
      ///
      /// Key: Invite Friends
      ///
      /// Locales: en, tr
      var inviteFriends: RswiftResources.StringResource { .init(key: "Invite Friends", tableName: "Localizable", source: source, developmentValue: "Invite Friends", comment: nil) }

      /// en translation: Keep you conversation going from all devices
      ///
      /// Key: Keep you conversation going from all devices
      ///
      /// Locales: en, tr
      var keepYouConversationGoingFromAllDevices: RswiftResources.StringResource { .init(key: "Keep you conversation going from all devices", tableName: "Localizable", source: source, developmentValue: "Keep you conversation going from all devices", comment: nil) }

      /// en translation: Label
      ///
      /// Key: Label
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var label: RswiftResources.StringResource { .init(key: "Label", tableName: "Localizable", source: source, developmentValue: "Label", comment: nil) }

      /// en translation: Language
      ///
      /// Key: Language
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var language: RswiftResources.StringResource { .init(key: "Language", tableName: "Localizable", source: source, developmentValue: "Language", comment: nil) }

      /// en translation: Last Name
      ///
      /// Key: Last Name
      ///
      /// Locales: en, tr
      var lastName: RswiftResources.StringResource { .init(key: "Last Name", tableName: "Localizable", source: source, developmentValue: "Last Name", comment: nil) }

      /// en translation: Light mode
      ///
      /// Key: Light mode
      ///
      /// Locales: en, tr
      var lightMode: RswiftResources.StringResource { .init(key: "Light mode", tableName: "Localizable", source: source, developmentValue: "Light mode", comment: nil) }

      /// en translation: Loading Profile...
      ///
      /// Key: Loading Profile...
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var loadingProfile: RswiftResources.StringResource { .init(key: "Loading Profile...", tableName: "Localizable", source: source, developmentValue: "Loading Profile...", comment: nil) }

      /// en translation: Loading...
      ///
      /// Key: Loading...
      ///
      /// Locales: en, tr
      var loading: RswiftResources.StringResource { .init(key: "Loading...", tableName: "Localizable", source: source, developmentValue: "Loading...", comment: nil) }

      /// en translation: Location
      ///
      /// Key: Location
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var location: RswiftResources.StringResource { .init(key: "Location", tableName: "Localizable", source: source, developmentValue: "Location", comment: nil) }

      /// en translation: Log in
      ///
      /// Key: Log in
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var logIn: RswiftResources.StringResource { .init(key: "Log in", tableName: "Localizable", source: source, developmentValue: "Log in", comment: nil) }

      /// en translation: Login Successfull!!
      ///
      /// Key: Login Successfull!!
      ///
      /// Locales: en, tr
      var loginSuccessfull: RswiftResources.StringResource { .init(key: "Login Successfull!!", tableName: "Localizable", source: source, developmentValue: "Login Successfull!!", comment: nil) }

      /// en translation: Login with Facebook
      ///
      /// Key: Login with Facebook
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var loginWithFacebook: RswiftResources.StringResource { .init(key: "Login with Facebook", tableName: "Localizable", source: source, developmentValue: "Login with Facebook", comment: nil) }

      /// en translation: Login with google
      ///
      /// Key: Login with google
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var loginWithGoogle: RswiftResources.StringResource { .init(key: "Login with google", tableName: "Localizable", source: source, developmentValue: "Login with google", comment: nil) }

      /// en translation: Logout
      ///
      /// Key: Logout
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var logout: RswiftResources.StringResource { .init(key: "Logout", tableName: "Localizable", source: source, developmentValue: "Logout", comment: nil) }

      /// en translation: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Key: Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var loremIpsumDolorSitErElitLametConsectetaurCilliumAdipisicingPecuSedDoEiusmodTemporIncididuntUtLaboreEtDoloreMagnaAliquaUtEnimAdMinimVeniamQuisNostrudExercitationUllamcoLaborisNisiUtAliquipExEaCommodoConsequatDuisAuteIrureDolorInReprehenderitInVoluptateVelitEsseCillumDoloreEuFugiatNullaPariaturExcepteurSintOccaecatCupidatatNonProidentSuntInCulpaQuiOfficiaDeseruntMollitAnimIdEstLaborumNamLiberTeConscientToFactorTumPoenLegumOdioqueCiviuda: RswiftResources.StringResource { .init(key: "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", tableName: "Localizable", source: source, developmentValue: "Lorem ipsum dolor sit er elit lamet, consectetaur cillium adipisicing pecu, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Nam liber te conscient to factor tum poen legum odioque civiuda.", comment: nil) }

      /// en translation: MALE
      ///
      /// Key: MALE
      ///
      /// Locales: en, tr
      var malE: RswiftResources.StringResource { .init(key: "MALE", tableName: "Localizable", source: source, developmentValue: "MALE", comment: nil) }

      /// en translation: Male
      ///
      /// Key: Male
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var male: RswiftResources.StringResource { .init(key: "Male", tableName: "Localizable", source: source, developmentValue: "Male", comment: nil) }

      /// en translation: Manage Sessions
      ///
      /// Key: Manage Sessions
      ///
      /// Locales: en, tr
      var manageSessions: RswiftResources.StringResource { .init(key: "Manage Sessions", tableName: "Localizable", source: source, developmentValue: "Manage Sessions", comment: nil) }

      /// en translation: Message Info
      ///
      /// Key: Message Info
      ///
      /// Locales: en, tr
      var messageInfo: RswiftResources.StringResource { .init(key: "Message Info", tableName: "Localizable", source: source, developmentValue: "Message Info", comment: nil) }

      /// en translation: Message Notification
      ///
      /// Key: Message Notification
      ///
      /// Locales: en, tr
      var messageNotification: RswiftResources.StringResource { .init(key: "Message Notification", tableName: "Localizable", source: source, developmentValue: "Message Notification", comment: nil) }

      /// en translation: Message Notifications
      ///
      /// Key: Message Notifications
      ///
      /// Locales: ru, en, it, ar-001, fr, de, es
      var messageNotifications: RswiftResources.StringResource { .init(key: "Message Notifications", tableName: "Localizable", source: source, developmentValue: "Message Notifications", comment: nil) }

      /// en translation: Messengerv2.3
      ///
      /// Key: Messengerv2.3
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var messengerv23: RswiftResources.StringResource { .init(key: "Messengerv2.3", tableName: "Localizable", source: source, developmentValue: "Messengerv2.3", comment: nil) }

      /// en translation: Mobile
      ///
      /// Key: Mobile
      ///
      /// Locales: en, tr
      var mobile: RswiftResources.StringResource { .init(key: "Mobile", tableName: "Localizable", source: source, developmentValue: "Mobile", comment: nil) }

      /// en translation: Mute
      ///
      /// Key: Mute
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var mute: RswiftResources.StringResource { .init(key: "Mute", tableName: "Localizable", source: source, developmentValue: "Mute", comment: nil) }

      /// en translation: My Account
      ///
      /// Key: My Account
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var myAccount: RswiftResources.StringResource { .init(key: "My Account", tableName: "Localizable", source: source, developmentValue: "My Account", comment: nil) }

      /// en translation: MyFriend
      ///
      /// Key: MyFriend
      ///
      /// Locales: en, tr
      var myFriend: RswiftResources.StringResource { .init(key: "MyFriend", tableName: "Localizable", source: source, developmentValue: "MyFriend", comment: nil) }

      /// en translation: NO
      ///
      /// Key: NO
      ///
      /// Locales: en, tr
      var nO: RswiftResources.StringResource { .init(key: "NO", tableName: "Localizable", source: source, developmentValue: "NO", comment: nil) }

      /// en translation: Name
      ///
      /// Key: Name
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var name: RswiftResources.StringResource { .init(key: "Name", tableName: "Localizable", source: source, developmentValue: "Name", comment: nil) }

      /// en translation: New Features
      ///
      /// Key: New Features
      ///
      /// Locales: en, tr
      var newFeatures: RswiftResources.StringResource { .init(key: "New Features", tableName: "Localizable", source: source, developmentValue: "New Features", comment: nil) }

      /// en translation: New Password
      ///
      /// Key: New Password
      ///
      /// Locales: en, tr
      var newPassword: RswiftResources.StringResource { .init(key: "New Password", tableName: "Localizable", source: source, developmentValue: "New Password", comment: nil) }

      /// en translation: New Version
      ///
      /// Key: New Version
      ///
      /// Locales: en, tr
      var newVersion: RswiftResources.StringResource { .init(key: "New Version", tableName: "Localizable", source: source, developmentValue: "New Version", comment: nil) }

      /// en translation: No Calls
      ///
      /// Key: No Calls
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var noCalls: RswiftResources.StringResource { .init(key: "No Calls", tableName: "Localizable", source: source, developmentValue: "No Calls", comment: nil) }

      /// en translation: No body
      ///
      /// Key: No body
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var noBody: RswiftResources.StringResource { .init(key: "No body", tableName: "Localizable", source: source, developmentValue: "No body", comment: nil) }

      /// en translation: No internet access
      ///
      /// Key: No internet access
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var noInternetAccess: RswiftResources.StringResource { .init(key: "No internet access", tableName: "Localizable", source: source, developmentValue: "No internet access", comment: nil) }

      /// en translation: No more Messages
      ///
      /// Key: No more Messages
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var noMoreMessages: RswiftResources.StringResource { .init(key: "No more Messages", tableName: "Localizable", source: source, developmentValue: "No more Messages", comment: nil) }

      /// en translation: Nobody
      ///
      /// Key: Nobody
      ///
      /// Locales: en, tr
      var nobody: RswiftResources.StringResource { .init(key: "Nobody", tableName: "Localizable", source: source, developmentValue: "Nobody", comment: nil) }

      /// en translation: Notification Popup
      ///
      /// Key: Notification Popup
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var notificationPopup: RswiftResources.StringResource { .init(key: "Notification Popup", tableName: "Localizable", source: source, developmentValue: "Notification Popup", comment: nil) }

      /// en translation: OFFLINE
      ///
      /// Key: OFFLINE
      ///
      /// Locales: en, tr
      var offlinE: RswiftResources.StringResource { .init(key: "OFFLINE", tableName: "Localizable", source: source, developmentValue: "OFFLINE", comment: nil) }

      /// en translation: OK
      ///
      /// Key: OK
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var oK: RswiftResources.StringResource { .init(key: "OK", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: ONLINE
      ///
      /// Key: ONLINE
      ///
      /// Locales: en, tr
      var onlinE: RswiftResources.StringResource { .init(key: "ONLINE", tableName: "Localizable", source: source, developmentValue: "ONLINE", comment: nil) }

      /// en translation: Offline
      ///
      /// Key: Offline
      ///
      /// Locales: en, tr
      var offline: RswiftResources.StringResource { .init(key: "Offline", tableName: "Localizable", source: source, developmentValue: "Offline", comment: nil) }

      /// en translation: Okay
      ///
      /// Key: Okay
      ///
      /// Locales: en, tr
      var okay: RswiftResources.StringResource { .init(key: "Okay", tableName: "Localizable", source: source, developmentValue: "Okay", comment: nil) }

      /// en translation: Online
      ///
      /// Key: Online
      ///
      /// Locales: en, tr
      var online: RswiftResources.StringResource { .init(key: "Online", tableName: "Localizable", source: source, developmentValue: "Online", comment: nil) }

      /// ru translation: Password
      ///
      /// Key: Password
      ///
      /// Locales: ru, it, ar-001, fr, de, es
      var password: RswiftResources.StringResource { .init(key: "Password", tableName: "Localizable", source: source, developmentValue: nil, comment: nil) }

      /// en translation: Password do not match.
      ///
      /// Key: Password do not match.
      ///
      /// Locales: en, tr
      var passwordDoNotMatch: RswiftResources.StringResource { .init(key: "Password do not match.", tableName: "Localizable", source: source, developmentValue: "Password do not match.", comment: nil) }

      /// en translation: Password does not match. Try again!
      ///
      /// Key: Password does not match. Try again!
      ///
      /// Locales: en, tr
      var passwordDoesNotMatchTryAgain: RswiftResources.StringResource { .init(key: "Password does not match. Try again!", tableName: "Localizable", source: source, developmentValue: "Password does not match. Try again!", comment: nil) }

      /// en translation: Password has been changed!
      ///
      /// Key: Password has been changed!
      ///
      /// Locales: en, tr
      var passwordHasBeenChanged: RswiftResources.StringResource { .init(key: "Password has been changed!", tableName: "Localizable", source: source, developmentValue: "Password has been changed!", comment: nil) }

      /// en translation: People i Follow
      ///
      /// Key: People i Follow
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var peopleIFollow: RswiftResources.StringResource { .init(key: "People i Follow", tableName: "Localizable", source: source, developmentValue: "People i Follow", comment: nil) }

      /// en translation: Phone
      ///
      /// Key: Phone
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var phone: RswiftResources.StringResource { .init(key: "Phone", tableName: "Localizable", source: source, developmentValue: "Phone", comment: nil) }

      /// en translation: Photos and videos shared in stories are only visible for 24 hours after they have been added.
      ///
      /// Key: Photos and videos shared in stories are only visible for 24 hours after they have been added.
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var photosAndVideosSharedInStoriesAreOnlyVisibleFor24HoursAfterTheyHaveBeenAdded: RswiftResources.StringResource { .init(key: "Photos and videos shared in stories are only visible for 24 hours after they have been added.", tableName: "Localizable", source: source, developmentValue: "Photos and videos shared in stories are only visible for 24 hours after they have been added.", comment: nil) }

      /// en translation: Play sound for incoming and outgoing messages
      ///
      /// Key: Play sound for incoming and outgoing messages
      ///
      /// Locales: en, tr
      var playSoundForIncomingAndOutgoingMessages: RswiftResources.StringResource { .init(key: "Play sound for incoming and outgoing messages", tableName: "Localizable", source: source, developmentValue: "Play sound for incoming and outgoing messages", comment: nil) }

      /// en translation: Play sounds for incoming and outgoing messages
      ///
      /// Key: Play sounds for incoming and outgoing messages
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var playSoundsForIncomingAndOutgoingMessages: RswiftResources.StringResource { .init(key: "Play sounds for incoming and outgoing messages", tableName: "Localizable", source: source, developmentValue: "Play sounds for incoming and outgoing messages", comment: nil) }

      /// en translation: Please check your internet connection.
      ///
      /// Key: Please check your internet connection.
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var pleaseCheckYourInternetConnection: RswiftResources.StringResource { .init(key: "Please check your internet connection.", tableName: "Localizable", source: source, developmentValue: "Please check your internet connection.", comment: nil) }

      /// en translation: Please enter Code.
      ///
      /// Key: Please enter Code.
      ///
      /// Locales: en, tr
      var pleaseEnterCode: RswiftResources.StringResource { .init(key: "Please enter Code.", tableName: "Localizable", source: source, developmentValue: "Please enter Code.", comment: nil) }

      /// en translation: Please enter confirm password.
      ///
      /// Key: Please enter confirm password.
      ///
      /// Locales: en, tr
      var pleaseEnterConfirmPassword: RswiftResources.StringResource { .init(key: "Please enter confirm password.", tableName: "Localizable", source: source, developmentValue: "Please enter confirm password.", comment: nil) }

      /// en translation: Please enter current confirm password.
      ///
      /// Key: Please enter current confirm password.
      ///
      /// Locales: en, tr
      var pleaseEnterCurrentConfirmPassword: RswiftResources.StringResource { .init(key: "Please enter current confirm password.", tableName: "Localizable", source: source, developmentValue: "Please enter current confirm password.", comment: nil) }

      /// en translation: Please enter current new password.
      ///
      /// Key: Please enter current new password.
      ///
      /// Locales: en, tr
      var pleaseEnterCurrentNewPassword: RswiftResources.StringResource { .init(key: "Please enter current new password.", tableName: "Localizable", source: source, developmentValue: "Please enter current new password.", comment: nil) }

      /// en translation: Please enter current password.
      ///
      /// Key: Please enter current password.
      ///
      /// Locales: en, tr
      var pleaseEnterCurrentPassword: RswiftResources.StringResource { .init(key: "Please enter current password.", tableName: "Localizable", source: source, developmentValue: "Please enter current password.", comment: nil) }

      /// en translation: Please enter email.
      ///
      /// Key: Please enter email.
      ///
      /// Locales: en, tr
      var pleaseEnterEmail: RswiftResources.StringResource { .init(key: "Please enter email.", tableName: "Localizable", source: source, developmentValue: "Please enter email.", comment: nil) }

      /// en translation: Please enter group name.
      ///
      /// Key: Please enter group name.
      ///
      /// Locales: en, tr
      var pleaseEnterGroupName: RswiftResources.StringResource { .init(key: "Please enter group name.", tableName: "Localizable", source: source, developmentValue: "Please enter group name.", comment: nil) }

      /// en translation: Please enter password.
      ///
      /// Key: Please enter password.
      ///
      /// Locales: en, tr
      var pleaseEnterPassword: RswiftResources.StringResource { .init(key: "Please enter password.", tableName: "Localizable", source: source, developmentValue: "Please enter password.", comment: nil) }

      /// en translation: Please enter username.
      ///
      /// Key: Please enter username.
      ///
      /// Locales: en, tr
      var pleaseEnterUsername: RswiftResources.StringResource { .init(key: "Please enter username.", tableName: "Localizable", source: source, developmentValue: "Please enter username.", comment: nil) }

      /// en translation: Please select Atleast one participant.
      ///
      /// Key: Please select Atleast one participant.
      ///
      /// Locales: en, tr
      var pleaseSelectAtleastOneParticipant: RswiftResources.StringResource { .init(key: "Please select Atleast one participant.", tableName: "Localizable", source: source, developmentValue: "Please select Atleast one participant.", comment: nil) }

      /// en translation: Please select group avatar.
      ///
      /// Key: Please select group avatar.
      ///
      /// Locales: en, tr
      var pleaseSelectGroupAvatar: RswiftResources.StringResource { .init(key: "Please select group avatar.", tableName: "Localizable", source: source, developmentValue: "Please select group avatar.", comment: nil) }

      /// en translation: Please write your email
      ///
      /// Key: Please write your email
      ///
      /// Locales: en, tr
      var pleaseWriteYourEmail: RswiftResources.StringResource { .init(key: "Please write your email", tableName: "Localizable", source: source, developmentValue: "Please write your email", comment: nil) }

      /// en translation: Privacy
      ///
      /// Key: Privacy
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var privacy: RswiftResources.StringResource { .init(key: "Privacy", tableName: "Localizable", source: source, developmentValue: "Privacy", comment: nil) }

      /// en translation: Privacy Policy
      ///
      /// Key: Privacy Policy
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var privacyPolicy: RswiftResources.StringResource { .init(key: "Privacy Policy", tableName: "Localizable", source: source, developmentValue: "Privacy Policy", comment: nil) }

      /// en translation: Profile Picture
      ///
      /// Key: Profile Picture
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var profilePicture: RswiftResources.StringResource { .init(key: "Profile Picture", tableName: "Localizable", source: source, developmentValue: "Profile Picture", comment: nil) }

      /// en translation: RETRY
      ///
      /// Key: RETRY
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var retrY: RswiftResources.StringResource { .init(key: "RETRY", tableName: "Localizable", source: source, developmentValue: "RETRY", comment: nil) }

      /// en translation: Refresh
      ///
      /// Key: Refresh
      ///
      /// Locales: en, tr
      var refresh: RswiftResources.StringResource { .init(key: "Refresh", tableName: "Localizable", source: source, developmentValue: "Refresh", comment: nil) }

      /// en translation: Register now
      ///
      /// Key: Register now
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var registerNow: RswiftResources.StringResource { .init(key: "Register now", tableName: "Localizable", source: source, developmentValue: "Register now", comment: nil) }

      /// en translation: Register now and start chatting with your friends
      ///
      /// Key: Register now and start chatting with your friends
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var registerNowAndStartChattingWithYourFriends: RswiftResources.StringResource { .init(key: "Register now and start chatting with your friends", tableName: "Localizable", source: source, developmentValue: "Register now and start chatting with your friends", comment: nil) }

      /// en translation: Repeat password
      ///
      /// Key: Repeat password
      ///
      /// Locales: en, tr
      var repeatPassword: RswiftResources.StringResource { .init(key: "Repeat password", tableName: "Localizable", source: source, developmentValue: "Repeat password", comment: nil) }

      /// en translation: Report a Problem
      ///
      /// Key: Report a Problem
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var reportAProblem: RswiftResources.StringResource { .init(key: "Report a Problem", tableName: "Localizable", source: source, developmentValue: "Report a Problem", comment: nil) }

      /// en translation: Requested
      ///
      /// Key: Requested
      ///
      /// Locales: en, tr
      var requested: RswiftResources.StringResource { .init(key: "Requested", tableName: "Localizable", source: source, developmentValue: "Requested", comment: nil) }

      /// en translation: Reset filter
      ///
      /// Key: Reset filter
      ///
      /// Locales: en, tr
      var resetFilter: RswiftResources.StringResource { .init(key: "Reset filter", tableName: "Localizable", source: source, developmentValue: "Reset filter", comment: nil) }

      /// en translation: SAVE
      ///
      /// Key: SAVE
      ///
      /// Locales: en, tr
      var savE: RswiftResources.StringResource { .init(key: "SAVE", tableName: "Localizable", source: source, developmentValue: "SAVE", comment: nil) }

      /// en translation: SKIP
      ///
      /// Key: SKIP
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var skiP: RswiftResources.StringResource { .init(key: "SKIP", tableName: "Localizable", source: source, developmentValue: "SKIP", comment: nil) }

      /// en translation: STORIES
      ///
      /// Key: STORIES
      ///
      /// Locales: en, tr
      var storieS: RswiftResources.StringResource { .init(key: "STORIES", tableName: "Localizable", source: source, developmentValue: "STORIES", comment: nil) }

      /// en translation: Save
      ///
      /// Key: Save
      ///
      /// Locales: en
      var save: RswiftResources.StringResource { .init(key: "Save", tableName: "Localizable", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Search
      ///
      /// Key: Search
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var search: RswiftResources.StringResource { .init(key: "Search", tableName: "Localizable", source: source, developmentValue: "Search", comment: nil) }

      /// en translation: Search Contact
      ///
      /// Key: Search Contact
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var searchContact: RswiftResources.StringResource { .init(key: "Search Contact", tableName: "Localizable", source: source, developmentValue: "Search Contact", comment: nil) }

      /// en translation: Search Globally
      ///
      /// Key: Search Globally
      ///
      /// Locales: en, tr
      var searchGlobally: RswiftResources.StringResource { .init(key: "Search Globally", tableName: "Localizable", source: source, developmentValue: "Search Globally", comment: nil) }

      /// en translation: Search Random
      ///
      /// Key: Search Random
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var searchRandom: RswiftResources.StringResource { .init(key: "Search Random", tableName: "Localizable", source: source, developmentValue: "Search Random", comment: nil) }

      /// en translation: Security
      ///
      /// Key: Security
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var security: RswiftResources.StringResource { .init(key: "Security", tableName: "Localizable", source: source, developmentValue: "Security", comment: nil) }

      /// en translation: Select Image
      ///
      /// Key: Select Image
      ///
      /// Locales: en, tr
      var selectImage: RswiftResources.StringResource { .init(key: "Select Image", tableName: "Localizable", source: source, developmentValue: "Select Image", comment: nil) }

      /// en translation: Select from your contact list
      ///
      /// Key: Select from your contact list
      ///
      /// Locales: en, tr
      var selectFromYourContactList: RswiftResources.StringResource { .init(key: "Select from your contact list", tableName: "Localizable", source: source, developmentValue: "Select from your contact list", comment: nil) }

      /// en translation: Select what you want
      ///
      /// Key: Select what you want
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var selectWhatYouWant: RswiftResources.StringResource { .init(key: "Select what you want", tableName: "Localizable", source: source, developmentValue: "Select what you want", comment: nil) }

      /// en translation: Send
      ///
      /// Key: Send
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var send: RswiftResources.StringResource { .init(key: "Send", tableName: "Localizable", source: source, developmentValue: "Send", comment: nil) }

      /// en translation: Send & Recieve all kind of messages
      ///
      /// Key: Send & Recieve all kind of messages
      ///
      /// Locales: en, tr
      var sendRecieveAllKindOfMessages: RswiftResources.StringResource { .init(key: "Send & Recieve all kind of messages", tableName: "Localizable", source: source, developmentValue: "Send & Recieve all kind of messages", comment: nil) }

      /// en translation: Settings
      ///
      /// Key: Settings
      ///
      /// Locales: en, tr
      var settings: RswiftResources.StringResource { .init(key: "Settings", tableName: "Localizable", source: source, developmentValue: "Settings", comment: nil) }

      /// en translation: Share
      ///
      /// Key: Share
      ///
      /// Locales: en, tr
      var share: RswiftResources.StringResource { .init(key: "Share", tableName: "Localizable", source: source, developmentValue: "Share", comment: nil) }

      /// en translation: Show online users
      ///
      /// Key: Show online users
      ///
      /// Locales: en, tr
      var showOnlineUsers: RswiftResources.StringResource { .init(key: "Show online users", tableName: "Localizable", source: source, developmentValue: "Show online users", comment: nil) }

      /// en translation: Show when user are online
      ///
      /// Key: Show when user are online
      ///
      /// Locales: en, tr
      var showWhenUserAreOnline: RswiftResources.StringResource { .init(key: "Show when user are online", tableName: "Localizable", source: source, developmentValue: "Show when user are online", comment: nil) }

      /// en translation: Social Link
      ///
      /// Key: Social Link
      ///
      /// Locales: en, tr
      var socialLink: RswiftResources.StringResource { .init(key: "Social Link", tableName: "Localizable", source: source, developmentValue: "Social Link", comment: nil) }

      /// en translation: Social Links 
      ///
      /// Key: Social Links 
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var socialLinks: RswiftResources.StringResource { .init(key: "Social Links ", tableName: "Localizable", source: source, developmentValue: "Social Links ", comment: nil) }

      /// en translation: Start Blocking Users
      ///
      /// Key: Start Blocking Users
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var startBlockingUsers: RswiftResources.StringResource { .init(key: "Start Blocking Users", tableName: "Localizable", source: source, developmentValue: "Start Blocking Users", comment: nil) }

      /// en translation: Start a new call from your friends list by pressing the button at the bottom of the screen.
      ///
      /// Key: Start a new call from your friends list by pressing the button at the bottom of the screen.
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var startANewCallFromYourFriendsListByPressingTheButtonAtTheBottomOfTheScreen: RswiftResources.StringResource { .init(key: "Start a new call from your friends list by pressing the button at the bottom of the screen.", tableName: "Localizable", source: source, developmentValue: "Start a new call from your friends list by pressing the button at the bottom of the screen.", comment: nil) }

      /// en translation: Start adding new contact !!
      ///
      /// Key: Start adding new contact !!
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var startAddingNewContact: RswiftResources.StringResource { .init(key: "Start adding new contact !!", tableName: "Localizable", source: source, developmentValue: "Start adding new contact !!", comment: nil) }

      /// en translation: Start new conversations by going to contact
      ///
      /// Key: Start new conversations by going to contact
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var startNewConversationsByGoingToContact: RswiftResources.StringResource { .init(key: "Start new conversations by going to contact", tableName: "Localizable", source: source, developmentValue: "Start new conversations by going to contact", comment: nil) }

      /// en translation: Start writing to search
      ///
      /// Key: Start writing to search
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var startWritingToSearch: RswiftResources.StringResource { .init(key: "Start writing to search", tableName: "Localizable", source: source, developmentValue: "Start writing to search", comment: nil) }

      /// en translation: Started Messages
      ///
      /// Key: Started Messages
      ///
      /// Locales: en, tr
      var startedMessages: RswiftResources.StringResource { .init(key: "Started Messages", tableName: "Localizable", source: source, developmentValue: "Started Messages", comment: nil) }

      /// en translation: Status
      ///
      /// Key: Status
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var status: RswiftResources.StringResource { .init(key: "Status", tableName: "Localizable", source: source, developmentValue: "Status", comment: nil) }

      /// en translation: Stay Sync
      ///
      /// Key: Stay Sync
      ///
      /// Locales: en, tr
      var staySync: RswiftResources.StringResource { .init(key: "Stay Sync", tableName: "Localizable", source: source, developmentValue: "Stay Sync", comment: nil) }

      /// en translation: Suggested Users
      ///
      /// Key: Suggested Users
      ///
      /// Locales: en, tr
      var suggestedUsers: RswiftResources.StringResource { .init(key: "Suggested Users", tableName: "Localizable", source: source, developmentValue: "Suggested Users", comment: nil) }

      /// en translation: Support
      ///
      /// Key: Support
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var support: RswiftResources.StringResource { .init(key: "Support", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: Switch Camera
      ///
      /// Key: Switch Camera
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var switchCamera: RswiftResources.StringResource { .init(key: "Switch Camera", tableName: "Localizable", source: source, developmentValue: "Switch Camera", comment: nil) }

      /// en translation: Take a picture from the camera
      ///
      /// Key: Take a picture from the camera
      ///
      /// Locales: en, tr
      var takeAPictureFromTheCamera: RswiftResources.StringResource { .init(key: "Take a picture from the camera", tableName: "Localizable", source: source, developmentValue: "Take a picture from the camera", comment: nil) }

      /// en translation: Terms of Service
      ///
      /// Key: Terms of Service
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var termsOfService: RswiftResources.StringResource { .init(key: "Terms of Service", tableName: "Localizable", source: source, developmentValue: "Terms of Service", comment: nil) }

      /// en translation: The user has been unfollowed
      ///
      /// Key: The user has been unfollowed
      ///
      /// Locales: en, tr
      var theUserHasBeenUnfollowed: RswiftResources.StringResource { .init(key: "The user has been unfollowed", tableName: "Localizable", source: source, developmentValue: "The user has been unfollowed", comment: nil) }

      /// en translation: Theme
      ///
      /// Key: Theme
      ///
      /// Locales: en, tr
      var theme: RswiftResources.StringResource { .init(key: "Theme", tableName: "Localizable", source: source, developmentValue: "Theme", comment: nil) }

      /// en translation: There are no Contacts
      ///
      /// Key: There are no Contacts
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var thereAreNoContacts: RswiftResources.StringResource { .init(key: "There are no Contacts", tableName: "Localizable", source: source, developmentValue: "There are no Contacts", comment: nil) }

      /// en translation: There are no call Logs to clear
      ///
      /// Key: There are no call Logs to clear
      ///
      /// Locales: en, tr
      var thereAreNoCallLogsToClear: RswiftResources.StringResource { .init(key: "There are no call Logs to clear", tableName: "Localizable", source: source, developmentValue: "There are no call Logs to clear", comment: nil) }

      /// en translation: There are no stories
      ///
      /// Key: There are no stories
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var thereAreNoStories: RswiftResources.StringResource { .init(key: "There are no stories", tableName: "Localizable", source: source, developmentValue: "There are no stories", comment: nil) }

      /// en translation: There are no suggested Users Available
      ///
      /// Key: There are no suggested Users Available
      ///
      /// Locales: en, tr
      var thereAreNoSuggestedUsersAvailable: RswiftResources.StringResource { .init(key: "There are no suggested Users Available", tableName: "Localizable", source: source, developmentValue: "There are no suggested Users Available", comment: nil) }

      /// en translation: There is no Group request
      ///
      /// Key: There is no Group request
      ///
      /// Locales: en, tr
      var thereIsNoGroupRequest: RswiftResources.StringResource { .init(key: "There is no Group request", tableName: "Localizable", source: source, developmentValue: "There is no Group request", comment: nil) }

      /// en translation: There is no blocked Users
      ///
      /// Key: There is no blocked Users
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var thereIsNoBlockedUsers: RswiftResources.StringResource { .init(key: "There is no blocked Users", tableName: "Localizable", source: source, developmentValue: "There is no blocked Users", comment: nil) }

      /// en translation: To log in, you need to verify  your identity.
      ///
      /// Key: To log in, you need to verify  your identity.
      ///
      /// Locales: en, tr
      var toLogInYouNeedToVerifyYourIdentity: RswiftResources.StringResource { .init(key: "To log in, you need to verify  your identity.", tableName: "Localizable", source: source, developmentValue: "To log in, you need to verify  your identity.", comment: nil) }

      /// en translation: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Key: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Locales: en, tr
      var turnOn2StepLoginToLevelUpYourAccountSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSendToYourPhoneOrEmailToLogIn: RswiftResources.StringResource { .init(key: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", tableName: "Localizable", source: source, developmentValue: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", comment: nil) }

      /// en translation: Two-factor Authentication
      ///
      /// Key: Two-factor Authentication
      ///
      /// Locales: en, tr
      var twoFactorAuthentication: RswiftResources.StringResource { .init(key: "Two-factor Authentication", tableName: "Localizable", source: source, developmentValue: "Two-factor Authentication", comment: nil) }

      /// en translation: Un favorite
      ///
      /// Key: Un favorite
      ///
      /// Locales: en, tr
      var unFavorite: RswiftResources.StringResource { .init(key: "Un favorite", tableName: "Localizable", source: source, developmentValue: "Un favorite", comment: nil) }

      /// en translation: UnVerified
      ///
      /// Key: UnVerified
      ///
      /// Locales: en, tr
      var unVerified: RswiftResources.StringResource { .init(key: "UnVerified", tableName: "Localizable", source: source, developmentValue: "UnVerified", comment: nil) }

      /// en translation: Unblocked
      ///
      /// Key: Unblocked
      ///
      /// Locales: en, tr
      var unblocked: RswiftResources.StringResource { .init(key: "Unblocked", tableName: "Localizable", source: source, developmentValue: "Unblocked", comment: nil) }

      /// en translation: Update Group
      ///
      /// Key: Update Group
      ///
      /// Locales: en, tr
      var updateGroup: RswiftResources.StringResource { .init(key: "Update Group", tableName: "Localizable", source: source, developmentValue: "Update Group", comment: nil) }

      /// en translation: User Info
      ///
      /// Key: User Info
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var userInfo: RswiftResources.StringResource { .init(key: "User Info", tableName: "Localizable", source: source, developmentValue: "User Info", comment: nil) }

      /// en translation: User has been blocked!!
      ///
      /// Key: User has been blocked!!
      ///
      /// Locales: en, tr
      var userHasBeenBlocked: RswiftResources.StringResource { .init(key: "User has been blocked!!", tableName: "Localizable", source: source, developmentValue: "User has been blocked!!", comment: nil) }

      /// en translation: User has been unblocked!!
      ///
      /// Key: User has been unblocked!!
      ///
      /// Locales: en, tr
      var userHasBeenUnblocked: RswiftResources.StringResource { .init(key: "User has been unblocked!!", tableName: "Localizable", source: source, developmentValue: "User has been unblocked!!", comment: nil) }

      /// en translation: UserName
      ///
      /// Key: UserName
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var userName: RswiftResources.StringResource { .init(key: "UserName", tableName: "Localizable", source: source, developmentValue: "UserName", comment: nil) }

      /// en translation: VERIFY
      ///
      /// Key: VERIFY
      ///
      /// Locales: en, tr
      var verifY: RswiftResources.StringResource { .init(key: "VERIFY", tableName: "Localizable", source: source, developmentValue: "VERIFY", comment: nil) }

      /// en translation: Verified
      ///
      /// Key: Verified
      ///
      /// Locales: en, tr
      var verified: RswiftResources.StringResource { .init(key: "Verified", tableName: "Localizable", source: source, developmentValue: "Verified", comment: nil) }

      /// en translation: Video Gallery
      ///
      /// Key: Video Gallery
      ///
      /// Locales: en, tr
      var videoGallery: RswiftResources.StringResource { .init(key: "Video Gallery", tableName: "Localizable", source: source, developmentValue: "Video Gallery", comment: nil) }

      /// en translation: Video Mute
      ///
      /// Key: Video Mute
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var videoMute: RswiftResources.StringResource { .init(key: "Video Mute", tableName: "Localizable", source: source, developmentValue: "Video Mute", comment: nil) }

      /// en translation: View
      ///
      /// Key: View
      ///
      /// Locales: en, tr
      var view: RswiftResources.StringResource { .init(key: "View", tableName: "Localizable", source: source, developmentValue: "View", comment: nil) }

      /// en translation: View Profile
      ///
      /// Key: View Profile
      ///
      /// Locales: en, tr
      var viewProfile: RswiftResources.StringResource { .init(key: "View Profile", tableName: "Localizable", source: source, developmentValue: "View Profile", comment: nil) }

      /// en translation: View all Follow Request
      ///
      /// Key: View all Follow Request
      ///
      /// Locales: en, tr
      var viewAllFollowRequest: RswiftResources.StringResource { .init(key: "View all Follow Request", tableName: "Localizable", source: source, developmentValue: "View all Follow Request", comment: nil) }

      /// en translation: Warning !
      ///
      /// Key: Warning !
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var warning: RswiftResources.StringResource { .init(key: "Warning !", tableName: "Localizable", source: source, developmentValue: "Warning !", comment: nil) }

      /// en translation: We Sent email to
      ///
      /// Key: We Sent email to
      ///
      /// Locales: en, tr
      var weSentEmailTo: RswiftResources.StringResource { .init(key: "We Sent email to", tableName: "Localizable", source: source, developmentValue: "We Sent email to", comment: nil) }

      /// en translation: We have sent you the confirmation code to your email address.
      ///
      /// Key: We have sent you the confirmation code to your email address.
      ///
      /// Locales: en, tr
      var weHaveSentYouTheConfirmationCodeToYourEmailAddress: RswiftResources.StringResource { .init(key: "We have sent you the confirmation code to your email address.", tableName: "Localizable", source: source, developmentValue: "We have sent you the confirmation code to your email address.", comment: nil) }

      /// en translation: Website
      ///
      /// Key: Website
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var website: RswiftResources.StringResource { .init(key: "Website", tableName: "Localizable", source: source, developmentValue: "Website", comment: nil) }

      /// en translation: Welcome Back!!
      ///
      /// Key: Welcome Back!!
      ///
      /// Locales: en, tr
      var welcomeBack: RswiftResources.StringResource { .init(key: "Welcome Back!!", tableName: "Localizable", source: source, developmentValue: "Welcome Back!!", comment: nil) }

      /// en translation: Who can follow me?
      ///
      /// Key: Who can follow me?
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var whoCanFollowMe: RswiftResources.StringResource { .init(key: "Who can follow me?", tableName: "Localizable", source: source, developmentValue: "Who can follow me?", comment: nil) }

      /// en translation: Who can message me?
      ///
      /// Key: Who can message me?
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var whoCanMessageMe: RswiftResources.StringResource { .init(key: "Who can message me?", tableName: "Localizable", source: source, developmentValue: "Who can message me?", comment: nil) }

      /// en translation: Who can see my birthday?
      ///
      /// Key: Who can see my birthday?
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var whoCanSeeMyBirthday: RswiftResources.StringResource { .init(key: "Who can see my birthday?", tableName: "Localizable", source: source, developmentValue: "Who can see my birthday?", comment: nil) }

      /// en translation: WoWonder
      ///
      /// Key: WoWonder
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var woWonder: RswiftResources.StringResource { .init(key: "WoWonder", tableName: "Localizable", source: source, developmentValue: "WoWonder", comment: nil) }

      /// en translation: WoWonder Messenger
      ///
      /// Key: WoWonder Messenger
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var woWonderMessenger: RswiftResources.StringResource { .init(key: "WoWonder Messenger", tableName: "Localizable", source: source, developmentValue: "WoWonder Messenger", comment: nil) }

      /// en translation: Workspace
      ///
      /// Key: Workspace
      ///
      /// Locales: en, tr
      var workspace: RswiftResources.StringResource { .init(key: "Workspace", tableName: "Localizable", source: source, developmentValue: "Workspace", comment: nil) }

      /// en translation: YES
      ///
      /// Key: YES
      ///
      /// Locales: en, tr
      var yeS: RswiftResources.StringResource { .init(key: "YES", tableName: "Localizable", source: source, developmentValue: "YES", comment: nil) }

      /// en translation: You can not access your disapproval of the Terms and Conditions.
      ///
      /// Key: You can not access your disapproval of the Terms and Conditions.
      ///
      /// Locales: en, tr
      var youCanNotAccessYourDisapprovalOfTheTermsAndConditions: RswiftResources.StringResource { .init(key: "You can not access your disapproval of the Terms and Conditions.", tableName: "Localizable", source: source, developmentValue: "You can not access your disapproval of the Terms and Conditions.", comment: nil) }

      /// en translation: You cannot block this user because it is administrator
      ///
      /// Key: You cannot block this user because it is administrator
      ///
      /// Locales: en, tr
      var youCannotBlockThisUserBecauseItIsAdministrator: RswiftResources.StringResource { .init(key: "You cannot block this user because it is administrator", tableName: "Localizable", source: source, developmentValue: "You cannot block this user because it is administrator", comment: nil) }

      /// en translation: You have followed the user successfully
      ///
      /// Key: You have followed the user successfully
      ///
      /// Locales: en, tr
      var youHaveFollowedTheUserSuccessfully: RswiftResources.StringResource { .init(key: "You have followed the user successfully", tableName: "Localizable", source: source, developmentValue: "You have followed the user successfully", comment: nil) }

      /// en translation: Your Story
      ///
      /// Key: Your Story
      ///
      /// Locales: en, tr
      var yourStory: RswiftResources.StringResource { .init(key: "Your Story", tableName: "Localizable", source: source, developmentValue: "Your Story", comment: nil) }

      /// en translation: Your message here...
      ///
      /// Key: Your message here...
      ///
      /// Locales: en, tr
      var yourMessageHere: RswiftResources.StringResource { .init(key: "Your message here...", tableName: "Localizable", source: source, developmentValue: "Your message here...", comment: nil) }

      /// en translation: and
      ///
      /// Key: and
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var and: RswiftResources.StringResource { .init(key: "and", tableName: "Localizable", source: source, developmentValue: "and", comment: nil) }

      /// en translation: audio
      ///
      /// Key: audio
      ///
      /// Locales: en, tr
      var audio: RswiftResources.StringResource { .init(key: "audio", tableName: "Localizable", source: source, developmentValue: "audio", comment: nil) }

      /// en translation: birthday Privacy
      ///
      /// Key: birthday Privacy
      ///
      /// Locales: en, tr
      var birthdayPrivacy: RswiftResources.StringResource { .init(key: "birthday Privacy", tableName: "Localizable", source: source, developmentValue: "birthday Privacy", comment: nil) }

      /// en translation: count
      ///
      /// Key: count
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var count: RswiftResources.StringResource { .init(key: "count", tableName: "Localizable", source: source, developmentValue: "count", comment: nil) }

      /// en translation: follow
      ///
      /// Key: follow
      ///
      /// Locales: en, tr
      var follow: RswiftResources.StringResource { .init(key: "follow", tableName: "Localizable", source: source, developmentValue: "follow", comment: nil) }

      /// en translation: get Notification when you receive messages
      ///
      /// Key: get Notification when you receive messages
      ///
      /// Locales: en, tr
      var getNotificationWhenYouReceiveMessages: RswiftResources.StringResource { .init(key: "get Notification when you receive messages", tableName: "Localizable", source: source, developmentValue: "get Notification when you receive messages", comment: nil) }

      /// en translation: google maps not found
      ///
      /// Key: google maps not found
      ///
      /// Locales: en, tr
      var googleMapsNotFound: RswiftResources.StringResource { .init(key: "google maps not found", tableName: "Localizable", source: source, developmentValue: "google maps not found", comment: nil) }

      /// en translation: remove from   favorite
      ///
      /// Key: remove from   favorite
      ///
      /// Locales: en, tr
      var removeFromFavorite: RswiftResources.StringResource { .init(key: "remove from   favorite", tableName: "Localizable", source: source, developmentValue: "remove from   favorite", comment: nil) }

      /// en translation: seen
      ///
      /// Key: seen
      ///
      /// Locales: en, tr
      var seen: RswiftResources.StringResource { .init(key: "seen", tableName: "Localizable", source: source, developmentValue: "seen", comment: nil) }

      /// en translation: someone is calling you
      ///
      /// Key: someone is calling you
      ///
      /// Locales: en, tr
      var someoneIsCallingYou: RswiftResources.StringResource { .init(key: "someone is calling you", tableName: "Localizable", source: source, developmentValue: "someone is calling you", comment: nil) }

      /// en translation: something to show
      ///
      /// Key: something to show
      ///
      /// Locales: ru, en, tr, it, ar-001, fr, de, es
      var somethingToShow: RswiftResources.StringResource { .init(key: "something to show", tableName: "Localizable", source: source, developmentValue: "something to show", comment: nil) }

      /// en translation: you are not allowed to perform any action on this activity
      ///
      /// Key: you are not allowed to perform any action on this activity
      ///
      /// Locales: en, tr
      var youAreNotAllowedToPerformAnyActionOnThisActivity: RswiftResources.StringResource { .init(key: "you are not allowed to perform any action on this activity", tableName: "Localizable", source: source, developmentValue: "you are not allowed to perform any action on this activity", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `App`.
    var app: RswiftResources.ColorResource { .init(name: "App", path: [], bundle: bundle) }

    /// Color `Color-1`.
    var color1: RswiftResources.ColorResource { .init(name: "Color-1", path: [], bundle: bundle) }

    /// Color `Color-2`.
    var color2: RswiftResources.ColorResource { .init(name: "Color-2", path: [], bundle: bundle) }

    /// Color `Color-3`.
    var color3: RswiftResources.ColorResource { .init(name: "Color-3", path: [], bundle: bundle) }

    /// Color `TableVIew`.
    var tableVIew: RswiftResources.ColorResource { .init(name: "TableVIew", path: [], bundle: bundle) }

    /// Color `TextColor`.
    var textColor: RswiftResources.ColorResource { .init(name: "TextColor", path: [], bundle: bundle) }

    /// Color `TextLiteColor`.
    var textLiteColor: RswiftResources.ColorResource { .init(name: "TextLiteColor", path: [], bundle: bundle) }

    /// Color `ViewBG`.
    var viewBG: RswiftResources.ColorResource { .init(name: "ViewBG", path: [], bundle: bundle) }

    /// Color `chat default`.
    var chatDefault: RswiftResources.ColorResource { .init(name: "chat default", path: [], bundle: bundle) }

    /// Color `settingView`.
    var settingView: RswiftResources.ColorResource { .init(name: "settingView", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 291 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `AgeCalender`.
    var ageCalender: RswiftResources.ImageResource { .init(name: "AgeCalender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ChevronRight`.
    var chevronRight: RswiftResources.ImageResource { .init(name: "ChevronRight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Gender`.
    var gender: RswiftResources.ImageResource { .init(name: "Gender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Ic_user_setting`.
    var ic_user_setting: RswiftResources.ImageResource { .init(name: "Ic_user_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Mappin`.
    var mappin: RswiftResources.ImageResource { .init(name: "Mappin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Options`.
    var options: RswiftResources.ImageResource { .init(name: "Options", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Splash Screen`.
    var splashScreen: RswiftResources.ImageResource { .init(name: "Splash Screen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `TwitterColor`.
    var twitterColor: RswiftResources.ImageResource { .init(name: "TwitterColor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `YouTubeColor`.
    var youTubeColor: RswiftResources.ImageResource { .init(name: "YouTubeColor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Youtube`.
    var youtube: RswiftResources.ImageResource { .init(name: "Youtube", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addAlbum`.
    var addAlbum: RswiftResources.ImageResource { .init(name: "addAlbum", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `birthday-cake`.
    var birthdayCake: RswiftResources.ImageResource { .init(name: "birthday-cake", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `birthday-cake-1`.
    var birthdayCake1: RswiftResources.ImageResource { .init(name: "birthday-cake-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `block-user_setting`.
    var blockUser_setting: RswiftResources.ImageResource { .init(name: "block-user_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `btn_endcall`.
    var btn_endcall: RswiftResources.ImageResource { .init(name: "btn_endcall", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `btn_mute`.
    var btn_mute: RswiftResources.ImageResource { .init(name: "btn_mute", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `btn_speaker_blue`.
    var btn_speaker_blue: RswiftResources.ImageResource { .init(name: "btn_speaker_blue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `calluser`.
    var calluser: RswiftResources.ImageResource { .init(name: "calluser", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `close`.
    var close: RswiftResources.ImageResource { .init(name: "close", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `close-1`.
    var close1: RswiftResources.ImageResource { .init(name: "close-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `d-avatar`.
    var dAvatar: RswiftResources.ImageResource { .init(name: "d-avatar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `d-cover`.
    var dCover: RswiftResources.ImageResource { .init(name: "d-cover", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `delete`.
    var delete: RswiftResources.ImageResource { .init(name: "delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dm_image`.
    var dm_image: RswiftResources.ImageResource { .init(name: "dm_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `envelope`.
    var envelope: RswiftResources.ImageResource { .init(name: "envelope", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `facebook`.
    var facebook: RswiftResources.ImageResource { .init(name: "facebook", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `facebookcolor`.
    var facebookcolor: RswiftResources.ImageResource { .init(name: "facebookcolor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `first_activity_image`.
    var first_activity_image: RswiftResources.ImageResource { .init(name: "first_activity_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `friend_msg_ic`.
    var friend_msg_ic: RswiftResources.ImageResource { .init(name: "friend_msg_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gender-1`.
    var gender1: RswiftResources.ImageResource { .init(name: "gender-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `genders`.
    var genders: RswiftResources.ImageResource { .init(name: "genders", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `google-plus`.
    var googlePlus: RswiftResources.ImageResource { .init(name: "google-plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `google-pluscolor`.
    var googlePluscolor: RswiftResources.ImageResource { .init(name: "google-pluscolor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hangUpButton`.
    var hangUpButton: RswiftResources.ImageResource { .init(name: "hangUpButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Archive`.
    var ic_Archive: RswiftResources.ImageResource { .init(name: "ic_Archive", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Bottom_Profile`.
    var ic_Bottom_Profile: RswiftResources.ImageResource { .init(name: "ic_Bottom_Profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Call_Chat`.
    var ic_Call_Chat: RswiftResources.ImageResource { .init(name: "ic_Call_Chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Call_New`.
    var ic_Call_New: RswiftResources.ImageResource { .init(name: "ic_Call_New", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Calling`.
    var ic_Calling: RswiftResources.ImageResource { .init(name: "ic_Calling", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Chat_Back`.
    var ic_Chat_Back: RswiftResources.ImageResource { .init(name: "ic_Chat_Back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Chat_Block`.
    var ic_Chat_Block: RswiftResources.ImageResource { .init(name: "ic_Chat_Block", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Chat_Media`.
    var ic_Chat_Media: RswiftResources.ImageResource { .init(name: "ic_Chat_Media", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Chat_Send`.
    var ic_Chat_Send: RswiftResources.ImageResource { .init(name: "ic_Chat_Send", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Chat_Theme`.
    var ic_Chat_Theme: RswiftResources.ImageResource { .init(name: "ic_Chat_Theme", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Chat_Voice`.
    var ic_Chat_Voice: RswiftResources.ImageResource { .init(name: "ic_Chat_Voice", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Chat_cancel`.
    var ic_Chat_cancel: RswiftResources.ImageResource { .init(name: "ic_Chat_cancel", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Chat_spl`.
    var ic_Chat_spl: RswiftResources.ImageResource { .init(name: "ic_Chat_spl", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Filter 1`.
    var ic_Filter1: RswiftResources.ImageResource { .init(name: "ic_Filter 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Group_Back`.
    var ic_Group_Back: RswiftResources.ImageResource { .init(name: "ic_Group_Back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Group_Camera`.
    var ic_Group_Camera: RswiftResources.ImageResource { .init(name: "ic_Group_Camera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Group_add`.
    var ic_Group_add: RswiftResources.ImageResource { .init(name: "ic_Group_add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Last_Location`.
    var ic_Last_Location: RswiftResources.ImageResource { .init(name: "ic_Last_Location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Last_Vidoe`.
    var ic_Last_Vidoe: RswiftResources.ImageResource { .init(name: "ic_Last_Vidoe", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_MOreSearch`.
    var ic_MOreSearch: RswiftResources.ImageResource { .init(name: "ic_MOreSearch", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Mute_chat`.
    var ic_Mute_chat: RswiftResources.ImageResource { .init(name: "ic_Mute_chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_MyGroups`.
    var ic_MyGroups: RswiftResources.ImageResource { .init(name: "ic_MyGroups", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Ne_down`.
    var ic_Ne_down: RswiftResources.ImageResource { .init(name: "ic_Ne_down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_NewSearch`.
    var ic_NewSearch: RswiftResources.ImageResource { .init(name: "ic_NewSearch", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_NewUser`.
    var ic_NewUser: RswiftResources.ImageResource { .init(name: "ic_NewUser", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_New_back`.
    var ic_New_back: RswiftResources.ImageResource { .init(name: "ic_New_back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_New_delete`.
    var ic_New_delete: RswiftResources.ImageResource { .init(name: "ic_New_delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_New_forward`.
    var ic_New_forward: RswiftResources.ImageResource { .init(name: "ic_New_forward", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_New_locationpin`.
    var ic_New_locationpin: RswiftResources.ImageResource { .init(name: "ic_New_locationpin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_New_more`.
    var ic_New_more: RswiftResources.ImageResource { .init(name: "ic_New_more", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_New_phone_call`.
    var ic_New_phone_call: RswiftResources.ImageResource { .init(name: "ic_New_phone_call", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_New_pin`.
    var ic_New_pin: RswiftResources.ImageResource { .init(name: "ic_New_pin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_New_star`.
    var ic_New_star: RswiftResources.ImageResource { .init(name: "ic_New_star", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_New_video_Call`.
    var ic_New_video_Call: RswiftResources.ImageResource { .init(name: "ic_New_video_Call", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_No_User`.
    var ic_No_User: RswiftResources.ImageResource { .init(name: "ic_No_User", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_No_images`.
    var ic_No_images: RswiftResources.ImageResource { .init(name: "ic_No_images", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Offline`.
    var ic_Offline: RswiftResources.ImageResource { .init(name: "ic_Offline", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Profile_Heart`.
    var ic_Profile_Heart: RswiftResources.ImageResource { .init(name: "ic_Profile_Heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Replay`.
    var ic_Replay: RswiftResources.ImageResource { .init(name: "ic_Replay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Show_Password`.
    var ic_Show_Password: RswiftResources.ImageResource { .init(name: "ic_Show_Password", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Soical_Twitter`.
    var ic_Soical_Twitter: RswiftResources.ImageResource { .init(name: "ic_Soical_Twitter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_Video_`.
    var ic_Video_: RswiftResources.ImageResource { .init(name: "ic_Video_", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_accept_user`.
    var ic_accept_user: RswiftResources.ImageResource { .init(name: "ic_accept_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_add`.
    var ic_add: RswiftResources.ImageResource { .init(name: "ic_add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_add-user_setting`.
    var ic_addUser_setting: RswiftResources.ImageResource { .init(name: "ic_add-user_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_addBtn`.
    var ic_addBtn: RswiftResources.ImageResource { .init(name: "ic_addBtn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_addGroup`.
    var ic_addGroup: RswiftResources.ImageResource { .init(name: "ic_addGroup", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_add_Group`.
    var ic_add_Group: RswiftResources.ImageResource { .init(name: "ic_add_Group", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_add_user`.
    var ic_add_user: RswiftResources.ImageResource { .init(name: "ic_add_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_attach`.
    var ic_attach: RswiftResources.ImageResource { .init(name: "ic_attach", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_audio_media`.
    var ic_audio_media: RswiftResources.ImageResource { .init(name: "ic_audio_media", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_audio_setting`.
    var ic_audio_setting: RswiftResources.ImageResource { .init(name: "ic_audio_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_back`.
    var ic_back: RswiftResources.ImageResource { .init(name: "ic_back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_bigCamera`.
    var ic_bigCamera: RswiftResources.ImageResource { .init(name: "ic_bigCamera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_bigNoMessage`.
    var ic_bigNoMessage: RswiftResources.ImageResource { .init(name: "ic_bigNoMessage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_block_setting (1)`.
    var ic_block_setting1: RswiftResources.ImageResource { .init(name: "ic_block_setting (1)", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_blockedUsers`.
    var ic_blockedUsers: RswiftResources.ImageResource { .init(name: "ic_blockedUsers", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_brithday_setting`.
    var ic_brithday_setting: RswiftResources.ImageResource { .init(name: "ic_brithday_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_callBig`.
    var ic_callBig: RswiftResources.ImageResource { .init(name: "ic_callBig", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_callIcon`.
    var ic_callIcon: RswiftResources.ImageResource { .init(name: "ic_callIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_callRed`.
    var ic_callRed: RswiftResources.ImageResource { .init(name: "ic_callRed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_call_white`.
    var ic_call_white: RswiftResources.ImageResource { .init(name: "ic_call_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_calls`.
    var ic_calls: RswiftResources.ImageResource { .init(name: "ic_calls", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_camera`.
    var ic_camera: RswiftResources.ImageResource { .init(name: "ic_camera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cancel`.
    var ic_cancel: RswiftResources.ImageResource { .init(name: "ic_cancel", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cancle_group_user`.
    var ic_cancle_group_user: RswiftResources.ImageResource { .init(name: "ic_cancle_group_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_case`.
    var ic_case: RswiftResources.ImageResource { .init(name: "ic_case", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat`.
    var ic_chat: RswiftResources.ImageResource { .init(name: "ic_chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_More`.
    var ic_chat_More: RswiftResources.ImageResource { .init(name: "ic_chat_More", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_More_df`.
    var ic_chat_More_df: RswiftResources.ImageResource { .init(name: "ic_chat_More_df", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_Video`.
    var ic_chat_Video: RswiftResources.ImageResource { .init(name: "ic_chat_Video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_Video_df`.
    var ic_chat_Video_df: RswiftResources.ImageResource { .init(name: "ic_chat_Video_df", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_bacground`.
    var ic_chat_bacground: RswiftResources.ImageResource { .init(name: "ic_chat_bacground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_call_df`.
    var ic_chat_call_df: RswiftResources.ImageResource { .init(name: "ic_chat_call_df", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_def_emoji`.
    var ic_chat_def_emoji: RswiftResources.ImageResource { .init(name: "ic_chat_def_emoji", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_emoji`.
    var ic_chat_emoji: RswiftResources.ImageResource { .init(name: "ic_chat_emoji", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_home`.
    var ic_chat_home: RswiftResources.ImageResource { .init(name: "ic_chat_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_setting`.
    var ic_chat_setting: RswiftResources.ImageResource { .init(name: "ic_chat_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_violet`.
    var ic_chat_violet: RswiftResources.ImageResource { .init(name: "ic_chat_violet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chats`.
    var ic_chats: RswiftResources.ImageResource { .init(name: "ic_chats", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_check`.
    var ic_check: RswiftResources.ImageResource { .init(name: "ic_check", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_checkRed`.
    var ic_checkRed: RswiftResources.ImageResource { .init(name: "ic_checkRed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_check_red`.
    var ic_check_red: RswiftResources.ImageResource { .init(name: "ic_check_red", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_check_setting`.
    var ic_check_setting: RswiftResources.ImageResource { .init(name: "ic_check_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_checkblack`.
    var ic_checkblack: RswiftResources.ImageResource { .init(name: "ic_checkblack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_checkbox`.
    var ic_checkbox: RswiftResources.ImageResource { .init(name: "ic_checkbox", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_clear_chat`.
    var ic_clear_chat: RswiftResources.ImageResource { .init(name: "ic_clear_chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_close_black`.
    var ic_close_black: RswiftResources.ImageResource { .init(name: "ic_close_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_color`.
    var ic_color: RswiftResources.ImageResource { .init(name: "ic_color", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_color_wall`.
    var ic_color_wall: RswiftResources.ImageResource { .init(name: "ic_color_wall", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_contact`.
    var ic_contact: RswiftResources.ImageResource { .init(name: "ic_contact", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_county`.
    var ic_county: RswiftResources.ImageResource { .init(name: "ic_county", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cross`.
    var ic_cross: RswiftResources.ImageResource { .init(name: "ic_cross", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_dark-mode_setting`.
    var ic_darkMode_setting: RswiftResources.ImageResource { .init(name: "ic_dark-mode_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_doc`.
    var ic_doc: RswiftResources.ImageResource { .init(name: "ic_doc", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_doc_right`.
    var ic_doc_right: RswiftResources.ImageResource { .init(name: "ic_doc_right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_earth`.
    var ic_earth: RswiftResources.ImageResource { .init(name: "ic_earth", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_email`.
    var ic_email: RswiftResources.ImageResource { .init(name: "ic_email", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_emailBlack`.
    var ic_emailBlack: RswiftResources.ImageResource { .init(name: "ic_emailBlack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_facebook`.
    var ic_facebook: RswiftResources.ImageResource { .init(name: "ic_facebook", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_facebook_og`.
    var ic_facebook_og: RswiftResources.ImageResource { .init(name: "ic_facebook_og", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_filter`.
    var ic_filter: RswiftResources.ImageResource { .init(name: "ic_filter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_filterFind`.
    var ic_filterFind: RswiftResources.ImageResource { .init(name: "ic_filterFind", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_gender`.
    var ic_gender: RswiftResources.ImageResource { .init(name: "ic_gender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_gift_last`.
    var ic_gift_last: RswiftResources.ImageResource { .init(name: "ic_gift_last", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_globe`.
    var ic_globe: RswiftResources.ImageResource { .init(name: "ic_globe", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_google`.
    var ic_google: RswiftResources.ImageResource { .init(name: "ic_google", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_google 1`.
    var ic_google1: RswiftResources.ImageResource { .init(name: "ic_google 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_gray_right`.
    var ic_gray_right: RswiftResources.ImageResource { .init(name: "ic_gray_right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_happy`.
    var ic_happy: RswiftResources.ImageResource { .init(name: "ic_happy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_hide_Password`.
    var ic_hide_Password: RswiftResources.ImageResource { .init(name: "ic_hide_Password", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_info`.
    var ic_info: RswiftResources.ImageResource { .init(name: "ic_info", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_instagram`.
    var ic_instagram: RswiftResources.ImageResource { .init(name: "ic_instagram", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_inta_og`.
    var ic_inta_og: RswiftResources.ImageResource { .init(name: "ic_inta_og", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_intro_forwardarrow`.
    var ic_intro_forwardarrow: RswiftResources.ImageResource { .init(name: "ic_intro_forwardarrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_last_document`.
    var ic_last_document: RswiftResources.ImageResource { .init(name: "ic_last_document", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_last_image`.
    var ic_last_image: RswiftResources.ImageResource { .init(name: "ic_last_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_last_mic`.
    var ic_last_mic: RswiftResources.ImageResource { .init(name: "ic_last_mic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_last_phone`.
    var ic_last_phone: RswiftResources.ImageResource { .init(name: "ic_last_phone", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_list_home`.
    var ic_list_home: RswiftResources.ImageResource { .init(name: "ic_list_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_location_home`.
    var ic_location_home: RswiftResources.ImageResource { .init(name: "ic_location_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_lock`.
    var ic_lock: RswiftResources.ImageResource { .init(name: "ic_lock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_logo`.
    var ic_logo: RswiftResources.ImageResource { .init(name: "ic_logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_logout_setting`.
    var ic_logout_setting: RswiftResources.ImageResource { .init(name: "ic_logout_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_magnifying_glass`.
    var ic_magnifying_glass: RswiftResources.ImageResource { .init(name: "ic_magnifying_glass", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_male`.
    var ic_male: RswiftResources.ImageResource { .init(name: "ic_male", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_manFilter`.
    var ic_manFilter: RswiftResources.ImageResource { .init(name: "ic_manFilter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_marker`.
    var ic_marker: RswiftResources.ImageResource { .init(name: "ic_marker", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_media_Camera`.
    var ic_media_Camera: RswiftResources.ImageResource { .init(name: "ic_media_Camera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_media_Contect`.
    var ic_media_Contect: RswiftResources.ImageResource { .init(name: "ic_media_Contect", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_media_Doc`.
    var ic_media_Doc: RswiftResources.ImageResource { .init(name: "ic_media_Doc", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_media_Location`.
    var ic_media_Location: RswiftResources.ImageResource { .init(name: "ic_media_Location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_media_Music`.
    var ic_media_Music: RswiftResources.ImageResource { .init(name: "ic_media_Music", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_media_Sticker`.
    var ic_media_Sticker: RswiftResources.ImageResource { .init(name: "ic_media_Sticker", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_media_gif`.
    var ic_media_gif: RswiftResources.ImageResource { .init(name: "ic_media_gif", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_media_photo`.
    var ic_media_photo: RswiftResources.ImageResource { .init(name: "ic_media_photo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_media_play`.
    var ic_media_play: RswiftResources.ImageResource { .init(name: "ic_media_play", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_microphone`.
    var ic_microphone: RswiftResources.ImageResource { .init(name: "ic_microphone", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_nearBy`.
    var ic_nearBy: RswiftResources.ImageResource { .init(name: "ic_nearBy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_not_seen`.
    var ic_not_seen: RswiftResources.ImageResource { .init(name: "ic_not_seen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_notification_setting`.
    var ic_notification_setting: RswiftResources.ImageResource { .init(name: "ic_notification_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_off`.
    var ic_off: RswiftResources.ImageResource { .init(name: "ic_off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_og_Twitter`.
    var ic_og_Twitter: RswiftResources.ImageResource { .init(name: "ic_og_Twitter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_og_vk`.
    var ic_og_vk: RswiftResources.ImageResource { .init(name: "ic_og_vk", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_og_youtube`.
    var ic_og_youtube: RswiftResources.ImageResource { .init(name: "ic_og_youtube", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_on`.
    var ic_on: RswiftResources.ImageResource { .init(name: "ic_on", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_padlock_setting`.
    var ic_padlock_setting: RswiftResources.ImageResource { .init(name: "ic_padlock_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_paper_plane`.
    var ic_paper_plane: RswiftResources.ImageResource { .init(name: "ic_paper_plane", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_password`.
    var ic_password: RswiftResources.ImageResource { .init(name: "ic_password", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_pauseBtn`.
    var ic_pauseBtn: RswiftResources.ImageResource { .init(name: "ic_pauseBtn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_personBlack`.
    var ic_personBlack: RswiftResources.ImageResource { .init(name: "ic_personBlack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_personFilter`.
    var ic_personFilter: RswiftResources.ImageResource { .init(name: "ic_personFilter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_persons`.
    var ic_persons: RswiftResources.ImageResource { .init(name: "ic_persons", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_phone_home`.
    var ic_phone_home: RswiftResources.ImageResource { .init(name: "ic_phone_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_photo_setting`.
    var ic_photo_setting: RswiftResources.ImageResource { .init(name: "ic_photo_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_pin_Message`.
    var ic_pin_Message: RswiftResources.ImageResource { .init(name: "ic_pin_Message", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_play 1`.
    var ic_play1: RswiftResources.ImageResource { .init(name: "ic_play 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_playBtn`.
    var ic_playBtn: RswiftResources.ImageResource { .init(name: "ic_playBtn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_playlist`.
    var ic_playlist: RswiftResources.ImageResource { .init(name: "ic_playlist", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_plus_home`.
    var ic_plus_home: RswiftResources.ImageResource { .init(name: "ic_plus_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_profie_gender`.
    var ic_profie_gender: RswiftResources.ImageResource { .init(name: "ic_profie_gender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_profile_Call`.
    var ic_profile_Call: RswiftResources.ImageResource { .init(name: "ic_profile_Call", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_profile_Location`.
    var ic_profile_Location: RswiftResources.ImageResource { .init(name: "ic_profile_Location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_profile_book`.
    var ic_profile_book: RswiftResources.ImageResource { .init(name: "ic_profile_book", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_profileimage`.
    var ic_profileimage: RswiftResources.ImageResource { .init(name: "ic_profileimage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_radio_off`.
    var ic_radio_off: RswiftResources.ImageResource { .init(name: "ic_radio_off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_radio_on`.
    var ic_radio_on: RswiftResources.ImageResource { .init(name: "ic_radio_on", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_read_chat`.
    var ic_read_chat: RswiftResources.ImageResource { .init(name: "ic_read_chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_recoding_access_spl`.
    var ic_recoding_access_spl: RswiftResources.ImageResource { .init(name: "ic_recoding_access_spl", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_redia`.
    var ic_redia: RswiftResources.ImageResource { .init(name: "ic_redia", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_redia_on`.
    var ic_redia_on: RswiftResources.ImageResource { .init(name: "ic_redia_on", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_rocket`.
    var ic_rocket: RswiftResources.ImageResource { .init(name: "ic_rocket", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_sear`.
    var ic_sear: RswiftResources.ImageResource { .init(name: "ic_sear", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_search`.
    var ic_search: RswiftResources.ImageResource { .init(name: "ic_search", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_search1`.
    var ic_search1: RswiftResources.ImageResource { .init(name: "ic_search1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_searchMore`.
    var ic_searchMore: RswiftResources.ImageResource { .init(name: "ic_searchMore", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_search_home`.
    var ic_search_home: RswiftResources.ImageResource { .init(name: "ic_search_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_searchbig`.
    var ic_searchbig: RswiftResources.ImageResource { .init(name: "ic_searchbig", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_seen`.
    var ic_seen: RswiftResources.ImageResource { .init(name: "ic_seen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_seenCheck`.
    var ic_seenCheck: RswiftResources.ImageResource { .init(name: "ic_seenCheck", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_selectPhoto`.
    var ic_selectPhoto: RswiftResources.ImageResource { .init(name: "ic_selectPhoto", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_send`.
    var ic_send: RswiftResources.ImageResource { .init(name: "ic_send", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_send 1`.
    var ic_send1: RswiftResources.ImageResource { .init(name: "ic_send 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_session_setting`.
    var ic_session_setting: RswiftResources.ImageResource { .init(name: "ic_session_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_setting_rightArrow`.
    var ic_setting_rightArrow: RswiftResources.ImageResource { .init(name: "ic_setting_rightArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_smartphone`.
    var ic_smartphone: RswiftResources.ImageResource { .init(name: "ic_smartphone", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_speakerOff`.
    var ic_speakerOff: RswiftResources.ImageResource { .init(name: "ic_speakerOff", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_speakerOn`.
    var ic_speakerOn: RswiftResources.ImageResource { .init(name: "ic_speakerOn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_spl_location`.
    var ic_spl_location: RswiftResources.ImageResource { .init(name: "ic_spl_location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_statusFilter`.
    var ic_statusFilter: RswiftResources.ImageResource { .init(name: "ic_statusFilter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_status_home`.
    var ic_status_home: RswiftResources.ImageResource { .init(name: "ic_status_home", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_stories`.
    var ic_stories: RswiftResources.ImageResource { .init(name: "ic_stories", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_studay`.
    var ic_studay: RswiftResources.ImageResource { .init(name: "ic_studay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_translation_settings`.
    var ic_translation_settings: RswiftResources.ImageResource { .init(name: "ic_translation_settings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_trash`.
    var ic_trash: RswiftResources.ImageResource { .init(name: "ic_trash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_twitter`.
    var ic_twitter: RswiftResources.ImageResource { .init(name: "ic_twitter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_uncheck`.
    var ic_uncheck: RswiftResources.ImageResource { .init(name: "ic_uncheck", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_uncheckRed`.
    var ic_uncheckRed: RswiftResources.ImageResource { .init(name: "ic_uncheckRed", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_uncheck_red`.
    var ic_uncheck_red: RswiftResources.ImageResource { .init(name: "ic_uncheck_red", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_uncheckgey`.
    var ic_uncheckgey: RswiftResources.ImageResource { .init(name: "ic_uncheckgey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_userProfile_DownArrow`.
    var ic_userProfile_DownArrow: RswiftResources.ImageResource { .init(name: "ic_userProfile_DownArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_username`.
    var ic_username: RswiftResources.ImageResource { .init(name: "ic_username", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_video`.
    var ic_video: RswiftResources.ImageResource { .init(name: "ic_video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_videoBlack`.
    var ic_videoBlack: RswiftResources.ImageResource { .init(name: "ic_videoBlack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_videoBordered`.
    var ic_videoBordered: RswiftResources.ImageResource { .init(name: "ic_videoBordered", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_video_white`.
    var ic_video_white: RswiftResources.ImageResource { .init(name: "ic_video_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_vidoe`.
    var ic_vidoe: RswiftResources.ImageResource { .init(name: "ic_vidoe", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_wlord_profile`.
    var ic_wlord_profile: RswiftResources.ImageResource { .init(name: "ic_wlord_profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_world_setting`.
    var ic_world_setting: RswiftResources.ImageResource { .init(name: "ic_world_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_wrok`.
    var ic_wrok: RswiftResources.ImageResource { .init(name: "ic_wrok", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_wrok_profile`.
    var ic_wrok_profile: RswiftResources.ImageResource { .init(name: "ic_wrok_profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_youtube`.
    var ic_youtube: RswiftResources.ImageResource { .init(name: "ic_youtube", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `image`.
    var image: RswiftResources.ImageResource { .init(name: "image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `img_login`.
    var img_login: RswiftResources.ImageResource { .init(name: "img_login", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `img_splash`.
    var img_splash: RswiftResources.ImageResource { .init(name: "img_splash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `instagram`.
    var instagram: RswiftResources.ImageResource { .init(name: "instagram", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `instagramcolor`.
    var instagramcolor: RswiftResources.ImageResource { .init(name: "instagramcolor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `left-arrow`.
    var leftArrow: RswiftResources.ImageResource { .init(name: "left-arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `localVideoMutedBg`.
    var localVideoMutedBg: RswiftResources.ImageResource { .init(name: "localVideoMutedBg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `log-in`.
    var logIn: RswiftResources.ImageResource { .init(name: "log-in", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `log-in-1`.
    var logIn1: RswiftResources.ImageResource { .init(name: "log-in-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `login`.
    var login: RswiftResources.ImageResource { .init(name: "login", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logo`.
    var logo: RswiftResources.ImageResource { .init(name: "logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `moreOption`.
    var moreOption: RswiftResources.ImageResource { .init(name: "moreOption", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `muteButton`.
    var muteButton: RswiftResources.ImageResource { .init(name: "muteButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `muteButtonSelected`.
    var muteButtonSelected: RswiftResources.ImageResource { .init(name: "muteButtonSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `my_msg_ic`.
    var my_msg_ic: RswiftResources.ImageResource { .init(name: "my_msg_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no-photo-available`.
    var noPhotoAvailable: RswiftResources.ImageResource { .init(name: "no-photo-available", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `nucleus`.
    var nucleus: RswiftResources.ImageResource { .init(name: "nucleus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `padlock`.
    var padlock: RswiftResources.ImageResource { .init(name: "padlock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `play`.
    var play: RswiftResources.ImageResource { .init(name: "play", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `plus`.
    var plus: RswiftResources.ImageResource { .init(name: "plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `protection`.
    var protection: RswiftResources.ImageResource { .init(name: "protection", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `science`.
    var science: RswiftResources.ImageResource { .init(name: "science", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searches`.
    var searches: RswiftResources.ImageResource { .init(name: "searches", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send-1`.
    var send1: RswiftResources.ImageResource { .init(name: "send-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send_Audio_massage`.
    var send_Audio_massage: RswiftResources.ImageResource { .init(name: "send_Audio_massage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sendes`.
    var sendes: RswiftResources.ImageResource { .init(name: "sendes", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sends`.
    var sends: RswiftResources.ImageResource { .init(name: "sends", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shutter`.
    var shutter: RswiftResources.ImageResource { .init(name: "shutter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `silent`.
    var silent: RswiftResources.ImageResource { .init(name: "silent", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `star`.
    var star: RswiftResources.ImageResource { .init(name: "star", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `switchCameraButton`.
    var switchCameraButton: RswiftResources.ImageResource { .init(name: "switchCameraButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `switchCameraButtonSelected`.
    var switchCameraButtonSelected: RswiftResources.ImageResource { .init(name: "switchCameraButtonSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tick`.
    var tick: RswiftResources.ImageResource { .init(name: "tick", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `twitter`.
    var twitter: RswiftResources.ImageResource { .init(name: "twitter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `twoFactor`.
    var twoFactor: RswiftResources.ImageResource { .init(name: "twoFactor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `user`.
    var user: RswiftResources.ImageResource { .init(name: "user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `user-1`.
    var user1: RswiftResources.ImageResource { .init(name: "user-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `user12`.
    var user12: RswiftResources.ImageResource { .init(name: "user12", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `user_setting`.
    var user_setting: RswiftResources.ImageResource { .init(name: "user_setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `verified-2`.
    var verified2: RswiftResources.ImageResource { .init(name: "verified-2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `videoMuteButton`.
    var videoMuteButton: RswiftResources.ImageResource { .init(name: "videoMuteButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `videoMuteButtonSelected`.
    var videoMuteButtonSelected: RswiftResources.ImageResource { .init(name: "videoMuteButtonSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `videoMutedIndicator`.
    var videoMutedIndicator: RswiftResources.ImageResource { .init(name: "videoMutedIndicator", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `vk`.
    var vk: RswiftResources.ImageResource { .init(name: "vk", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `vkColor`.
    var vkColor: RswiftResources.ImageResource { .init(name: "vkColor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
    let comAppleDeveloperApplesignin = comAppleDeveloperApplesignin()
    struct comAppleDeveloperApplesignin {
      let `default`: String = "Default"
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 45 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `BRSonoma-Black`.
    var brSonomaBlack: RswiftResources.FontResource { .init(name: "BRSonoma-Black", bundle: bundle, filename: "BRSonoma-Black.otf") }

    /// Font `BRSonoma-BlackItalic`.
    var brSonomaBlackItalic: RswiftResources.FontResource { .init(name: "BRSonoma-BlackItalic", bundle: bundle, filename: "BRSonoma-BlackItalic.otf") }

    /// Font `BRSonoma-Bold`.
    var brSonomaBold: RswiftResources.FontResource { .init(name: "BRSonoma-Bold", bundle: bundle, filename: "BRSonoma-Bold.otf") }

    /// Font `BRSonoma-BoldItalic`.
    var brSonomaBoldItalic: RswiftResources.FontResource { .init(name: "BRSonoma-BoldItalic", bundle: bundle, filename: "BRSonoma-BoldItalic.otf") }

    /// Font `BRSonoma-ExtraLight`.
    var brSonomaExtraLight: RswiftResources.FontResource { .init(name: "BRSonoma-ExtraLight", bundle: bundle, filename: "BRSonoma-ExtraLight.otf") }

    /// Font `BRSonoma-ExtraLightItalic`.
    var brSonomaExtraLightItalic: RswiftResources.FontResource { .init(name: "BRSonoma-ExtraLightItalic", bundle: bundle, filename: "BRSonoma-ExtraLightItalic.otf") }

    /// Font `BRSonoma-Light`.
    var brSonomaLight: RswiftResources.FontResource { .init(name: "BRSonoma-Light", bundle: bundle, filename: "BRSonoma-Light.otf") }

    /// Font `BRSonoma-LightItalic`.
    var brSonomaLightItalic: RswiftResources.FontResource { .init(name: "BRSonoma-LightItalic", bundle: bundle, filename: "BRSonoma-LightItalic.otf") }

    /// Font `BRSonoma-Medium`.
    var brSonomaMedium: RswiftResources.FontResource { .init(name: "BRSonoma-Medium", bundle: bundle, filename: "BRSonoma-Medium.otf") }

    /// Font `BRSonoma-MediumItalic`.
    var brSonomaMediumItalic: RswiftResources.FontResource { .init(name: "BRSonoma-MediumItalic", bundle: bundle, filename: "BRSonoma-MediumItalic.otf") }

    /// Font `BRSonoma-Regular`.
    var brSonomaRegular: RswiftResources.FontResource { .init(name: "BRSonoma-Regular", bundle: bundle, filename: "BRSonoma-Regular.otf") }

    /// Font `BRSonoma-RegularItalic`.
    var brSonomaRegularItalic: RswiftResources.FontResource { .init(name: "BRSonoma-RegularItalic", bundle: bundle, filename: "BRSonoma-RegularItalic.otf") }

    /// Font `BRSonoma-SemiBold`.
    var brSonomaSemiBold: RswiftResources.FontResource { .init(name: "BRSonoma-SemiBold", bundle: bundle, filename: "BRSonoma-SemiBold.otf") }

    /// Font `BRSonoma-SemiBoldItalic`.
    var brSonomaSemiBoldItalic: RswiftResources.FontResource { .init(name: "BRSonoma-SemiBoldItalic", bundle: bundle, filename: "BRSonoma-SemiBoldItalic.otf") }

    /// Font `BRSonoma-Thin`.
    var brSonomaThin: RswiftResources.FontResource { .init(name: "BRSonoma-Thin", bundle: bundle, filename: "BRSonoma-Thin.otf") }

    /// Font `BRSonoma-ThinItalic`.
    var brSonomaThinItalic: RswiftResources.FontResource { .init(name: "BRSonoma-ThinItalic", bundle: bundle, filename: "BRSonoma-ThinItalic.otf") }

    /// Font `BeyondWonderland`.
    var beyondWonderland: RswiftResources.FontResource { .init(name: "BeyondWonderland", bundle: bundle, filename: "beyond_wonderland.ttf") }

    /// Font `BoutrosMBCDinkum-Medium`.
    var boutrosMBCDinkumMedium: RswiftResources.FontResource { .init(name: "BoutrosMBCDinkum-Medium", bundle: bundle, filename: "BoutrosMBCDinkum-Medium.ttf") }

    /// Font `Bryndan-Write`.
    var bryndanWrite: RswiftResources.FontResource { .init(name: "Bryndan-Write", bundle: bundle, filename: "Bryndan-Write.ttf") }

    /// Font `HacenSudan`.
    var hacenSudan: RswiftResources.FontResource { .init(name: "HacenSudan", bundle: bundle, filename: "Hacen Sudan.ttf") }

    /// Font `Harmattan-Regular`.
    var harmattanRegular: RswiftResources.FontResource { .init(name: "Harmattan-Regular", bundle: bundle, filename: "Harmattan-Regular.ttf") }

    /// Font `Ionicons`.
    var ionicons: RswiftResources.FontResource { .init(name: "Ionicons", bundle: bundle, filename: "ionicons.ttf") }

    /// Font `Norican-Regular`.
    var noricanRegular: RswiftResources.FontResource { .init(name: "Norican-Regular", bundle: bundle, filename: "Norican-Regular.ttf") }

    /// Font `Oswald-Heavy`.
    var oswaldHeavy: RswiftResources.FontResource { .init(name: "Oswald-Heavy", bundle: bundle, filename: "Oswald-Heavy.ttf") }

    /// Font `Poppins-Black`.
    var poppinsBlack: RswiftResources.FontResource { .init(name: "Poppins-Black", bundle: bundle, filename: "Poppins-Black.otf") }

    /// Font `Poppins-BlackItalic`.
    var poppinsBlackItalic: RswiftResources.FontResource { .init(name: "Poppins-BlackItalic", bundle: bundle, filename: "Poppins-BlackItalic.otf") }

    /// Font `Poppins-Bold`.
    var poppinsBold: RswiftResources.FontResource { .init(name: "Poppins-Bold", bundle: bundle, filename: "Poppins-Bold.otf") }

    /// Font `Poppins-BoldItalic`.
    var poppinsBoldItalic: RswiftResources.FontResource { .init(name: "Poppins-BoldItalic", bundle: bundle, filename: "Poppins-BoldItalic.otf") }

    /// Font `Poppins-ExtraBold`.
    var poppinsExtraBold: RswiftResources.FontResource { .init(name: "Poppins-ExtraBold", bundle: bundle, filename: "Poppins-ExtraBold.otf") }

    /// Font `Poppins-ExtraBoldItalic`.
    var poppinsExtraBoldItalic: RswiftResources.FontResource { .init(name: "Poppins-ExtraBoldItalic", bundle: bundle, filename: "Poppins-ExtraBoldItalic.otf") }

    /// Font `Poppins-ExtraLight`.
    var poppinsExtraLight: RswiftResources.FontResource { .init(name: "Poppins-ExtraLight", bundle: bundle, filename: "Poppins-ExtraLight.otf") }

    /// Font `Poppins-ExtraLightItalic`.
    var poppinsExtraLightItalic: RswiftResources.FontResource { .init(name: "Poppins-ExtraLightItalic", bundle: bundle, filename: "Poppins-ExtraLightItalic.otf") }

    /// Font `Poppins-Italic`.
    var poppinsItalic: RswiftResources.FontResource { .init(name: "Poppins-Italic", bundle: bundle, filename: "Poppins-Italic.otf") }

    /// Font `Poppins-Light`.
    var poppinsLight: RswiftResources.FontResource { .init(name: "Poppins-Light", bundle: bundle, filename: "Poppins-Light.otf") }

    /// Font `Poppins-LightItalic`.
    var poppinsLightItalic: RswiftResources.FontResource { .init(name: "Poppins-LightItalic", bundle: bundle, filename: "Poppins-LightItalic.otf") }

    /// Font `Poppins-Medium`.
    var poppinsMedium: RswiftResources.FontResource { .init(name: "Poppins-Medium", bundle: bundle, filename: "Poppins-Medium.otf") }

    /// Font `Poppins-MediumItalic`.
    var poppinsMediumItalic: RswiftResources.FontResource { .init(name: "Poppins-MediumItalic", bundle: bundle, filename: "Poppins-MediumItalic.otf") }

    /// Font `Poppins-Regular`.
    var poppinsRegular: RswiftResources.FontResource { .init(name: "Poppins-Regular", bundle: bundle, filename: "Poppins-Regular.otf") }

    /// Font `Poppins-SemiBold`.
    var poppinsSemiBold: RswiftResources.FontResource { .init(name: "Poppins-SemiBold", bundle: bundle, filename: "Poppins-SemiBold.otf") }

    /// Font `Poppins-SemiBoldItalic`.
    var poppinsSemiBoldItalic: RswiftResources.FontResource { .init(name: "Poppins-SemiBoldItalic", bundle: bundle, filename: "Poppins-SemiBoldItalic.otf") }

    /// Font `Poppins-Thin`.
    var poppinsThin: RswiftResources.FontResource { .init(name: "Poppins-Thin", bundle: bundle, filename: "Poppins-Thin.otf") }

    /// Font `Poppins-ThinItalic`.
    var poppinsThinItalic: RswiftResources.FontResource { .init(name: "Poppins-ThinItalic", bundle: bundle, filename: "Poppins-ThinItalic.otf") }

    /// Font `Roboto-Medium`.
    var robotoMedium: RswiftResources.FontResource { .init(name: "Roboto-Medium", bundle: bundle, filename: "Roboto-Medium.ttf") }

    /// Font `RobotoMono-Regular2`.
    var robotoMonoRegular2: RswiftResources.FontResource { .init(name: "RobotoMono-Regular2", bundle: bundle, filename: "RobotoMono-Regular.ttf") }

    /// Font `SFUIDisplay-Regular`.
    var sfuiDisplayRegular: RswiftResources.FontResource { .init(name: "SFUIDisplay-Regular", bundle: bundle, filename: "SF-UI-Display-Regular.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [brSonomaBlack, brSonomaBlackItalic, brSonomaBold, brSonomaBoldItalic, brSonomaExtraLight, brSonomaExtraLightItalic, brSonomaLight, brSonomaLightItalic, brSonomaMedium, brSonomaMediumItalic, brSonomaRegular, brSonomaRegularItalic, brSonomaSemiBold, brSonomaSemiBoldItalic, brSonomaThin, brSonomaThinItalic, beyondWonderland, boutrosMBCDinkumMedium, bryndanWrite, hacenSudan, harmattanRegular, ionicons, noricanRegular, oswaldHeavy, poppinsBlack, poppinsBlackItalic, poppinsBold, poppinsBoldItalic, poppinsExtraBold, poppinsExtraBoldItalic, poppinsExtraLight, poppinsExtraLightItalic, poppinsItalic, poppinsLight, poppinsLightItalic, poppinsMedium, poppinsMediumItalic, poppinsRegular, poppinsSemiBold, poppinsSemiBoldItalic, poppinsThin, poppinsThinItalic, robotoMedium, robotoMonoRegular2, sfuiDisplayRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 65 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `BRSonoma-Black.otf`.
    var brSonomaBlackOtf: RswiftResources.FileResource { .init(name: "BRSonoma-Black", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-BlackItalic.otf`.
    var brSonomaBlackItalicOtf: RswiftResources.FileResource { .init(name: "BRSonoma-BlackItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-Bold.otf`.
    var brSonomaBoldOtf: RswiftResources.FileResource { .init(name: "BRSonoma-Bold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-BoldItalic.otf`.
    var brSonomaBoldItalicOtf: RswiftResources.FileResource { .init(name: "BRSonoma-BoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-ExtraLight.otf`.
    var brSonomaExtraLightOtf: RswiftResources.FileResource { .init(name: "BRSonoma-ExtraLight", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-ExtraLightItalic.otf`.
    var brSonomaExtraLightItalicOtf: RswiftResources.FileResource { .init(name: "BRSonoma-ExtraLightItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-Light.otf`.
    var brSonomaLightOtf: RswiftResources.FileResource { .init(name: "BRSonoma-Light", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-LightItalic.otf`.
    var brSonomaLightItalicOtf: RswiftResources.FileResource { .init(name: "BRSonoma-LightItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-Medium.otf`.
    var brSonomaMediumOtf: RswiftResources.FileResource { .init(name: "BRSonoma-Medium", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-MediumItalic.otf`.
    var brSonomaMediumItalicOtf: RswiftResources.FileResource { .init(name: "BRSonoma-MediumItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-Regular.otf`.
    var brSonomaRegularOtf: RswiftResources.FileResource { .init(name: "BRSonoma-Regular", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-RegularItalic.otf`.
    var brSonomaRegularItalicOtf: RswiftResources.FileResource { .init(name: "BRSonoma-RegularItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-SemiBold.otf`.
    var brSonomaSemiBoldOtf: RswiftResources.FileResource { .init(name: "BRSonoma-SemiBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-SemiBoldItalic.otf`.
    var brSonomaSemiBoldItalicOtf: RswiftResources.FileResource { .init(name: "BRSonoma-SemiBoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-Thin.otf`.
    var brSonomaThinOtf: RswiftResources.FileResource { .init(name: "BRSonoma-Thin", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BRSonoma-ThinItalic.otf`.
    var brSonomaThinItalicOtf: RswiftResources.FileResource { .init(name: "BRSonoma-ThinItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BoutrosMBCDinkum-Medium.ttf`.
    var boutrosMBCDinkumMediumTtf: RswiftResources.FileResource { .init(name: "BoutrosMBCDinkum-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Bryndan-Write.ttf`.
    var bryndanWriteTtf: RswiftResources.FileResource { .init(name: "Bryndan-Write", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Hacen Sudan.ttf`.
    var hacenSudanTtf: RswiftResources.FileResource { .init(name: "Hacen Sudan", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Harmattan-Regular.ttf`.
    var harmattanRegularTtf: RswiftResources.FileResource { .init(name: "Harmattan-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Norican-Regular.ttf`.
    var noricanRegularTtf: RswiftResources.FileResource { .init(name: "Norican-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Oswald-Heavy.ttf`.
    var oswaldHeavyTtf: RswiftResources.FileResource { .init(name: "Oswald-Heavy", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Black.otf`.
    var poppinsBlackOtf: RswiftResources.FileResource { .init(name: "Poppins-Black", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-BlackItalic.otf`.
    var poppinsBlackItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-BlackItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Bold.otf`.
    var poppinsBoldOtf: RswiftResources.FileResource { .init(name: "Poppins-Bold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-BoldItalic.otf`.
    var poppinsBoldItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-BoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraBold.otf`.
    var poppinsExtraBoldOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraBoldItalic.otf`.
    var poppinsExtraBoldItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraBoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraLight.otf`.
    var poppinsExtraLightOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraLight", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraLightItalic.otf`.
    var poppinsExtraLightItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraLightItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Italic.otf`.
    var poppinsItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-Italic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Light.otf`.
    var poppinsLightOtf: RswiftResources.FileResource { .init(name: "Poppins-Light", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-LightItalic.otf`.
    var poppinsLightItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-LightItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Medium.otf`.
    var poppinsMediumOtf: RswiftResources.FileResource { .init(name: "Poppins-Medium", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-MediumItalic.otf`.
    var poppinsMediumItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-MediumItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Regular.otf`.
    var poppinsRegularOtf: RswiftResources.FileResource { .init(name: "Poppins-Regular", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-SemiBold.otf`.
    var poppinsSemiBoldOtf: RswiftResources.FileResource { .init(name: "Poppins-SemiBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-SemiBoldItalic.otf`.
    var poppinsSemiBoldItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-SemiBoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Thin.otf`.
    var poppinsThinOtf: RswiftResources.FileResource { .init(name: "Poppins-Thin", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ThinItalic.otf`.
    var poppinsThinItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-ThinItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Popup_GetMesseges.mp3`.
    var popup_GetMessegesMp3: RswiftResources.FileResource { .init(name: "Popup_GetMesseges", pathExtension: "mp3", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Popup_SendMesseges.mp3`.
    var popup_SendMessegesMp3: RswiftResources.FileResource { .init(name: "Popup_SendMesseges", pathExtension: "mp3", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Roboto-Medium.ttf`.
    var robotoMediumTtf: RswiftResources.FileResource { .init(name: "Roboto-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `RobotoMono-Regular.ttf`.
    var robotoMonoRegularTtf: RswiftResources.FileResource { .init(name: "RobotoMono-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF-UI-Display-Regular.ttf`.
    var sfuiDisplayRegularTtf: RswiftResources.FileResource { .init(name: "SF-UI-Display-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftdoc`.
    var arm64AppleIosSwiftdoc: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftinterface`.
    var arm64AppleIosSwiftinterface: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftmodule`.
    var arm64AppleIosSwiftmodule: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftsourceinfo`.
    var arm64AppleIosSwiftsourceinfo: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64.swiftdoc`.
    var arm64Swiftdoc: RswiftResources.FileResource { .init(name: "arm64", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64.swiftinterface`.
    var arm64Swiftinterface: RswiftResources.FileResource { .init(name: "arm64", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64.swiftmodule`.
    var arm64Swiftmodule: RswiftResources.FileResource { .init(name: "arm64", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64.swiftsourceinfo`.
    var arm64Swiftsourceinfo: RswiftResources.FileResource { .init(name: "arm64", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `beyond_wonderland.ttf`.
    var beyond_wonderlandTtf: RswiftResources.FileResource { .init(name: "beyond_wonderland", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `emojione-android.ttf`.
    var emojioneAndroidTtf: RswiftResources.FileResource { .init(name: "emojione-android", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `ionicons.ttf`.
    var ioniconsTtf: RswiftResources.FileResource { .init(name: "ionicons", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mystic_call.mp3`.
    var mystic_callMp3: RswiftResources.FileResource { .init(name: "mystic_call", pathExtension: "mp3", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftdoc`.
    var x86_64AppleIosSimulatorSwiftdoc: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftinterface`.
    var x86_64AppleIosSimulatorSwiftinterface: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftmodule`.
    var x86_64AppleIosSimulatorSwiftmodule: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftsourceinfo`.
    var x86_64AppleIosSimulatorSwiftsourceinfo: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64.swiftdoc`.
    var x86_64Swiftdoc: RswiftResources.FileResource { .init(name: "x86_64", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64.swiftinterface`.
    var x86_64Swiftinterface: RswiftResources.FileResource { .init(name: "x86_64", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64.swiftmodule`.
    var x86_64Swiftmodule: RswiftResources.FileResource { .init(name: "x86_64", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64.swiftsourceinfo`.
    var x86_64Swiftsourceinfo: RswiftResources.FileResource { .init(name: "x86_64", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 83 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `AddParticipantCell`.
    var addParticipantCell: RswiftResources.NibReferenceReuseIdentifier<AddParticipantCell, AddParticipantCell> { .init(name: "AddParticipantCell", bundle: bundle, identifier: "addParticipentCell") }

    /// Nib `AddParticipant-CollectionCell`.
    var addParticipantCollectionCell: RswiftResources.NibReferenceReuseIdentifier<AddParticipant_CollectionCell, AddParticipant_CollectionCell> { .init(name: "AddParticipant-CollectionCell", bundle: bundle, identifier: "AddParticipant_CollectionCell") }

    /// Nib `AddParticipants-TableCell`.
    var addParticipantsTableCell: RswiftResources.NibReferenceReuseIdentifier<AddParticipants_TableCell, AddParticipants_TableCell> { .init(name: "AddParticipants-TableCell", bundle: bundle, identifier: "AddParticipants_TableCell") }

    /// Nib `BlockedUsers-TableCell`.
    var blockedUsersTableCell: RswiftResources.NibReferenceReuseIdentifier<BlockedUsers_TableCell, BlockedUsers_TableCell> { .init(name: "BlockedUsers-TableCell", bundle: bundle, identifier: "BlockedUsers_TableCell") }

    /// Nib `BottonSetCell`.
    var bottonSetCell: RswiftResources.NibReference<BottonSetCell> { .init(name: "BottonSetCell", bundle: bundle) }

    /// Nib `CallCollectionViewCell`.
    var callCollectionViewCell: RswiftResources.NibReference<CallCollectionViewCell> { .init(name: "CallCollectionViewCell", bundle: bundle) }

    /// Nib `Calls-TableCell`.
    var callsTableCell: RswiftResources.NibReferenceReuseIdentifier<Calls_TableCell, Calls_TableCell> { .init(name: "Calls-TableCell", bundle: bundle, identifier: "Calls_TableCell") }

    /// Nib `ChangerColorCell`.
    var changerColorCell: RswiftResources.NibReference<ChangerColorCell> { .init(name: "ChangerColorCell", bundle: bundle) }

    /// Nib `ChatBottomSiteCell`.
    var chatBottomSiteCell: RswiftResources.NibReference<ChatBottomSiteCell> { .init(name: "ChatBottomSiteCell", bundle: bundle) }

    /// Nib `ChatInfoTableItem`.
    var chatInfoTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatInfoTableItem, ChatInfoTableItem> { .init(name: "ChatInfoTableItem", bundle: bundle, identifier: "ChatInfoTableItem") }

    /// Nib `ChatMediaCollectionViewCell`.
    var chatMediaCollectionViewCell: RswiftResources.NibReference<ChatMediaCollectionViewCell> { .init(name: "ChatMediaCollectionViewCell", bundle: bundle) }

    /// Nib `ChatReceiverAudio-TableCell`.
    var chatReceiverAudioTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatReceiverAudio_TableCell, ChatReceiverAudio_TableCell> { .init(name: "ChatReceiverAudio-TableCell", bundle: bundle, identifier: "ChatReceiverAudio_TableCell") }

    /// Nib `ChatReceiverContact-TableCell`.
    var chatReceiverContactTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatReceiverContact_TableCell, ChatReceiverContact_TableCell> { .init(name: "ChatReceiverContact-TableCell", bundle: bundle, identifier: "ChatReceiverContact_TableCell") }

    /// Nib `ChatReceiverDocument-TableCell`.
    var chatReceiverDocumentTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatReceiverDocument_TableCell, ChatReceiverDocument_TableCell> { .init(name: "ChatReceiverDocument-TableCell", bundle: bundle, identifier: "ChatReceiverDocument_TableCell") }

    /// Nib `ChatReceiverImage-TableCell`.
    var chatReceiverImageTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatReceiverImage_TableCell, ChatReceiverImage_TableCell> { .init(name: "ChatReceiverImage-TableCell", bundle: bundle, identifier: "ChatReceiverImage_TableCell") }

    /// Nib `ChatReceiverStricker-TableCell`.
    var chatReceiverStrickerTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatReceiverStricker_TableCell, ChatReceiverStricker_TableCell> { .init(name: "ChatReceiverStricker-TableCell", bundle: bundle, identifier: "ChatReceiverStricker_TableCell") }

    /// Nib `ChatReceiver-TableCell`.
    var chatReceiverTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatReceiver_TableCell, ChatReceiver_TableCell> { .init(name: "ChatReceiver-TableCell", bundle: bundle, identifier: "ChatReceiver_TableCell") }

    /// Nib `ChatSenderAudio-TableCell`.
    var chatSenderAudioTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatSenderAudio_TableCell, ChatSenderAudio_TableCell> { .init(name: "ChatSenderAudio-TableCell", bundle: bundle, identifier: "ChatSenderAudio_TableCell") }

    /// Nib `ChatSenderContact-TableCell`.
    var chatSenderContactTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatSenderContact_TableCell, ChatSenderContact_TableCell> { .init(name: "ChatSenderContact-TableCell", bundle: bundle, identifier: "ChatSenderContact_TableCell") }

    /// Nib `ChatSenderDocument-TableCell`.
    var chatSenderDocumentTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatSenderDocument_TableCell, ChatSenderDocument_TableCell> { .init(name: "ChatSenderDocument-TableCell", bundle: bundle, identifier: "ChatSenderDocument_TableCell") }

    /// Nib `ChatSenderImage-TableCell`.
    var chatSenderImageTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatSenderImage_TableCell, ChatSenderImage_TableCell> { .init(name: "ChatSenderImage-TableCell", bundle: bundle, identifier: "ChatSenderImage_TableCell") }

    /// Nib `ChatSenderSticker-TableCell`.
    var chatSenderStickerTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatSenderSticker_TableCell, ChatSenderSticker_TableCell> { .init(name: "ChatSenderSticker-TableCell", bundle: bundle, identifier: "ChatSenderSticker_TableCel") }

    /// Nib `ChatSender-TableCell`.
    var chatSenderTableCell: RswiftResources.NibReferenceReuseIdentifier<ChatSender_TableCell, ChatSender_TableCell> { .init(name: "ChatSender-TableCell", bundle: bundle, identifier: "ChatSender_TableCell") }

    /// Nib `Chats-TableCell`.
    var chatsTableCell: RswiftResources.NibReferenceReuseIdentifier<Chats_TableCell, Chats_TableCell> { .init(name: "Chats-TableCell", bundle: bundle, identifier: "Chats_TableCell") }

    /// Nib `ColorCollectionItem`.
    var colorCollectionItem: RswiftResources.NibReferenceReuseIdentifier<ColorCollectionItem, ColorCollectionItem> { .init(name: "ColorCollectionItem", bundle: bundle, identifier: "ColorCollectionItem") }

    /// Nib `CreateGroup-CollectionCell`.
    var createGroupCollectionCell: RswiftResources.NibReferenceReuseIdentifier<CreateGroup_CollectionCell, CreateGroup_CollectionCell> { .init(name: "CreateGroup-CollectionCell", bundle: bundle, identifier: "CreateGroup_CollectionCell") }

    /// Nib `FindFriendsCell`.
    var findFriendsCell: RswiftResources.NibReference<FindFriendsCell> { .init(name: "FindFriendsCell", bundle: bundle) }

    /// Nib `FindFriends-CollectionCell`.
    var findFriendsCollectionCell: RswiftResources.NibReferenceReuseIdentifier<FindFriends_CollectionCell, FindFriends_CollectionCell> { .init(name: "FindFriends-CollectionCell", bundle: bundle, identifier: "FindFriends_CollectionCell") }

    /// Nib `FollowRequestCell`.
    var followRequestCell: RswiftResources.NibReferenceReuseIdentifier<FollowRequestCell, FollowRequestCell> { .init(name: "FollowRequestCell", bundle: bundle, identifier: "RequestCell") }

    /// Nib `Followings-TableCell`.
    var followingsTableCell: RswiftResources.NibReferenceReuseIdentifier<Followings_TableCell, Followings_TableCell> { .init(name: "Followings-TableCell", bundle: bundle, identifier: "Followings_TableCell") }

    /// Nib `FontCollectionItem`.
    var fontCollectionItem: RswiftResources.NibReferenceReuseIdentifier<FontCollectionItem, FontCollectionItem> { .init(name: "FontCollectionItem", bundle: bundle, identifier: "FontCollectionItem") }

    /// Nib `FriendRequestCell`.
    var friendRequestCell: RswiftResources.NibReferenceReuseIdentifier<FriendRequestCell, FriendRequestCell> { .init(name: "FriendRequestCell", bundle: bundle, identifier: "FriendRequestcell") }

    /// Nib `FriendsTableItem`.
    var friendsTableItem: RswiftResources.NibReferenceReuseIdentifier<FriendsTableItem, FriendsTableItem> { .init(name: "FriendsTableItem", bundle: bundle, identifier: "FriendsTableItem") }

    /// Nib `GeneralTableViewCell`.
    var generalTableViewCell: RswiftResources.NibReference<GeneralTableViewCell> { .init(name: "GeneralTableViewCell", bundle: bundle) }

    /// Nib `GifCollectionCell`.
    var gifCollectionCell: RswiftResources.NibReferenceReuseIdentifier<GifCollectionCell, GifCollectionCell> { .init(name: "GifCollectionCell", bundle: bundle, identifier: "GifCollectionCell") }

    /// Nib `GroupAddParticipantsCell`.
    var groupAddParticipantsCell: RswiftResources.NibReference<GroupAddParticipantsCell> { .init(name: "GroupAddParticipantsCell", bundle: bundle) }

    /// Nib `GroupParticipentCell`.
    var groupParticipentCell: RswiftResources.NibReferenceReuseIdentifier<GroupParticipentCell, GroupParticipentCell> { .init(name: "GroupParticipentCell", bundle: bundle, identifier: "GroupParticipantcell") }

    /// Nib `GroupRequest-TableCell`.
    var groupRequestTableCell: RswiftResources.NibReferenceReuseIdentifier<GroupRequest_TableCell, GroupRequest_TableCell> { .init(name: "GroupRequest-TableCell", bundle: bundle, identifier: "GroupRequest_TableCell") }

    /// Nib `Group-TableCell`.
    var groupTableCell: RswiftResources.NibReferenceReuseIdentifier<Group_TableCell, Group_TableCell> { .init(name: "Group-TableCell", bundle: bundle, identifier: "Group_TableCell") }

    /// Nib `IntroItemView`.
    var introItemView: RswiftResources.NibReference<IntroItem> { .init(name: "IntroItemView", bundle: bundle) }

    /// Nib `InviteFriends-TableCell`.
    var inviteFriendsTableCell: RswiftResources.NibReferenceReuseIdentifier<InviteFriends_TableCell, InviteFriends_TableCell> { .init(name: "InviteFriends-TableCell", bundle: bundle, identifier: "InviteFriends_TableCell") }

    /// Nib `LeftAudioTableViewCell`.
    var leftAudioTableViewCell: RswiftResources.NibReference<LeftAudioTableViewCell> { .init(name: "LeftAudioTableViewCell", bundle: bundle) }

    /// Nib `LeftContactTableViewCell`.
    var leftContactTableViewCell: RswiftResources.NibReference<LeftContactTableViewCell> { .init(name: "LeftContactTableViewCell", bundle: bundle) }

    /// Nib `LeftDocumentTableViewCell`.
    var leftDocumentTableViewCell: RswiftResources.NibReference<LeftDocumentTableViewCell> { .init(name: "LeftDocumentTableViewCell", bundle: bundle) }

    /// Nib `LeftGiftTableViewCell`.
    var leftGiftTableViewCell: RswiftResources.NibReference<LeftGiftTableViewCell> { .init(name: "LeftGiftTableViewCell", bundle: bundle) }

    /// Nib `LeftImageTableViewCell`.
    var leftImageTableViewCell: RswiftResources.NibReference<LeftImageTableViewCell> { .init(name: "LeftImageTableViewCell", bundle: bundle) }

    /// Nib `LeftLocationTableViewCell`.
    var leftLocationTableViewCell: RswiftResources.NibReference<LeftLocationTableViewCell> { .init(name: "LeftLocationTableViewCell", bundle: bundle) }

    /// Nib `LeftTextTableViewCell`.
    var leftTextTableViewCell: RswiftResources.NibReference<LeftTextTableViewCell> { .init(name: "LeftTextTableViewCell", bundle: bundle) }

    /// Nib `LeftVidoeTableViewCell`.
    var leftVidoeTableViewCell: RswiftResources.NibReference<LeftVidoeTableViewCell> { .init(name: "LeftVidoeTableViewCell", bundle: bundle) }

    /// Nib `ManageSessionTableItem`.
    var manageSessionTableItem: RswiftResources.NibReferenceReuseIdentifier<ManageSessionTableItem, ManageSessionTableItem> { .init(name: "ManageSessionTableItem", bundle: bundle, identifier: "ManageSessionTableItem") }

    /// Nib `MapViewCell`.
    var mapViewCell: RswiftResources.NibReference<MapViewCell> { .init(name: "MapViewCell", bundle: bundle) }

    /// Nib `MapViewReceiveCell`.
    var mapViewReceiveCell: RswiftResources.NibReference<MapViewReceiveCell> { .init(name: "MapViewReceiveCell", bundle: bundle) }

    /// Nib `MediaCollectionViewCell`.
    var mediaCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<MediaCollectionViewCell, MediaCollectionViewCell> { .init(name: "MediaCollectionViewCell", bundle: bundle, identifier: "MediaCollectionViewCell") }

    /// Nib `MessageDateTableViewCell`.
    var messageDateTableViewCell: RswiftResources.NibReference<MessageDateTableViewCell> { .init(name: "MessageDateTableViewCell", bundle: bundle) }

    /// Nib `Pinned MessageVC`.
    var pinnedMessageVC: RswiftResources.NibReference<UIKit.UIView> { .init(name: "Pinned MessageVC", bundle: bundle) }

    /// Nib `ProductTableCell`.
    var productTableCell: RswiftResources.NibReferenceReuseIdentifier<ProductTableCell, ProductTableCell> { .init(name: "ProductTableCell", bundle: bundle, identifier: "ProductCell") }

    /// Nib `ReplyChatSenderTableItem`.
    var replyChatSenderTableItem: RswiftResources.NibReferenceReuseIdentifier<ReplyChatSenderTableItem, ReplyChatSenderTableItem> { .init(name: "ReplyChatSenderTableItem", bundle: bundle, identifier: "ReplyChatSenderTableItem") }

    /// Nib `replyReceiverTableItem`.
    var replyReceiverTableItem: RswiftResources.NibReferenceReuseIdentifier<replyReceiverTableItem, replyReceiverTableItem> { .init(name: "replyReceiverTableItem", bundle: bundle, identifier: "replyReceiverTableItem") }

    /// Nib `RequestCell`.
    var requestCell: RswiftResources.NibReference<RequestCell> { .init(name: "RequestCell", bundle: bundle) }

    /// Nib `RequestGroupOne-TableCell`.
    var requestGroupOneTableCell: RswiftResources.NibReferenceReuseIdentifier<RequestGroupOne_TableCell, RequestGroupOne_TableCell> { .init(name: "RequestGroupOne-TableCell", bundle: bundle, identifier: "RequestGroupOne_TableCell") }

    /// Nib `RightAudioTableViewCell`.
    var rightAudioTableViewCell: RswiftResources.NibReference<RightAudioTableViewCell> { .init(name: "RightAudioTableViewCell", bundle: bundle) }

    /// Nib `RightContactTableViewCell`.
    var rightContactTableViewCell: RswiftResources.NibReference<RightContactTableViewCell> { .init(name: "RightContactTableViewCell", bundle: bundle) }

    /// Nib `RightDocumentTableViewCell`.
    var rightDocumentTableViewCell: RswiftResources.NibReference<RightDocumentTableViewCell> { .init(name: "RightDocumentTableViewCell", bundle: bundle) }

    /// Nib `RightGiftTableViewCell`.
    var rightGiftTableViewCell: RswiftResources.NibReference<RightGiftTableViewCell> { .init(name: "RightGiftTableViewCell", bundle: bundle) }

    /// Nib `RightImageTableViewCell`.
    var rightImageTableViewCell: RswiftResources.NibReference<RightImageTableViewCell> { .init(name: "RightImageTableViewCell", bundle: bundle) }

    /// Nib `RightLocationTableViewCell`.
    var rightLocationTableViewCell: RswiftResources.NibReference<RightLocationTableViewCell> { .init(name: "RightLocationTableViewCell", bundle: bundle) }

    /// Nib `RightTextTableViewCell`.
    var rightTextTableViewCell: RswiftResources.NibReference<RightTextTableViewCell> { .init(name: "RightTextTableViewCell", bundle: bundle) }

    /// Nib `RightVidoeTableViewCell`.
    var rightVidoeTableViewCell: RswiftResources.NibReference<RightVidoeTableViewCell> { .init(name: "RightVidoeTableViewCell", bundle: bundle) }

    /// Nib `SearchRandom-TableCell`.
    var searchRandomTableCell: RswiftResources.NibReferenceReuseIdentifier<SearchRandom_TableCell, SearchRandom_TableCell> { .init(name: "SearchRandom-TableCell", bundle: bundle, identifier: "SearchRandom_TableCell") }

    /// Nib `SelectCategory-TableCell`.
    var selectCategoryTableCell: RswiftResources.NibReferenceReuseIdentifier<SelectCategory_TableCell, SelectCategory_TableCell> { .init(name: "SelectCategory-TableCell", bundle: bundle, identifier: "SelectCategory_TableCell") }

    /// Nib `SelectContact-TableCell`.
    var selectContactTableCell: RswiftResources.NibReferenceReuseIdentifier<SelectContact_TableCell, SelectContact_TableCell> { .init(name: "SelectContact-TableCell", bundle: bundle, identifier: "SelectContact_TableCell") }

    /// Nib `SelectLanguage-TableCell`.
    var selectLanguageTableCell: RswiftResources.NibReferenceReuseIdentifier<SelectLanguage_TableCell, SelectLanguage_TableCell> { .init(name: "SelectLanguage-TableCell", bundle: bundle, identifier: "SelectLanguage_TableCell") }

    /// Nib `SelectType-TableCell`.
    var selectTypeTableCell: RswiftResources.NibReferenceReuseIdentifier<SelectType_TableCell, SelectType_TableCell> { .init(name: "SelectType-TableCell", bundle: bundle, identifier: "SelectType_TableCell") }

    /// Nib `SettingSectionFourTableItem`.
    var settingSectionFourTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingSectionFourTableItem, SettingSectionFourTableItem> { .init(name: "SettingSectionFourTableItem", bundle: bundle, identifier: "SettingSectionFourTableItem") }

    /// Nib `SettingsSectionOneTableItem`.
    var settingsSectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingsSectionOneTableItem, SettingsSectionOneTableItem> { .init(name: "SettingsSectionOneTableItem", bundle: bundle, identifier: "SettingsSectionOneTableItem") }

    /// Nib `SettingsSectionThreeTableItem`.
    var settingsSectionThreeTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingsSectionThreeTableItem, SettingsSectionThreeTableItem> { .init(name: "SettingsSectionThreeTableItem", bundle: bundle, identifier: "SettingsSectionThreeTableItem") }

    /// Nib `SettingsSectionTwoTableItem`.
    var settingsSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingsSectionTwoTableItem, SettingsSectionTwoTableItem> { .init(name: "SettingsSectionTwoTableItem", bundle: bundle, identifier: "SettingsSectionTwoTableItem") }

    /// Nib `Stories-TableCell`.
    var storiesTableCell: RswiftResources.NibReferenceReuseIdentifier<Stories_TableCell, Stories_TableCell> { .init(name: "Stories-TableCell", bundle: bundle, identifier: "Stories_TableCell") }

    /// Nib `StorySectionOneTableItem`.
    var storySectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<StorySectionOneTableItem, StorySectionOneTableItem> { .init(name: "StorySectionOneTableItem", bundle: bundle, identifier: "StorySectionOneTableItem") }

    /// Nib `StorySectionThreeTableItem`.
    var storySectionThreeTableItem: RswiftResources.NibReferenceReuseIdentifier<StorySectionThreeTableItem, StorySectionThreeTableItem> { .init(name: "StorySectionThreeTableItem", bundle: bundle, identifier: "StorySectionThreeTableItem") }

    /// Nib `UserListChatCell`.
    var userListChatCell: RswiftResources.NibReference<UserListChatCell> { .init(name: "UserListChatCell", bundle: bundle) }

    /// Nib `UserProfileTableViewCell`.
    var userProfileTableViewCell: RswiftResources.NibReference<UserProfileTableViewCell> { .init(name: "UserProfileTableViewCell", bundle: bundle) }

    /// Nib `UserSuggestionCollectionCell`.
    var userSuggestionCollectionCell: RswiftResources.NibReferenceReuseIdentifier<UserSuggestionCollectionCell, UserSuggestionCollectionCell> { .init(name: "UserSuggestionCollectionCell", bundle: bundle, identifier: "UserSuggestionCollectionCell") }

    func validate() throws {
      if UIKit.UIImage(named: "ic_addBtn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_addBtn' is used in nib 'AddParticipant-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "addAlbum", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'addAlbum' is used in nib 'AddParticipantCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'AddParticipants-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_uncheckgey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheckgey' is used in nib 'AddParticipants-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'BlockedUsers-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_gray_right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_gray_right' is used in nib 'BottonSetCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_Calling", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Calling' is used in nib 'Calls-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_Video_", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Video_' is used in nib 'Calls-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_callIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_callIcon' is used in nib 'Calls-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'Calls-TableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in nib 'Calls-TableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in nib 'ChangerColorCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_info", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_info' is used in nib 'ChatBottomSiteCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "AgeCalender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'AgeCalender' is used in nib 'ChatMediaCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatReceiver-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_playBtn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_playBtn' is used in nib 'ChatReceiverAudio-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatReceiverAudio-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'ChatReceiverContact-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatReceiverContact-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_doc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_doc' is used in nib 'ChatReceiverDocument-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatReceiverDocument-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_playBtn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_playBtn' is used in nib 'ChatReceiverImage-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatReceiverImage-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatReceiverStricker-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatSender-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_playBtn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_playBtn' is used in nib 'ChatSenderAudio-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatSenderAudio-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'ChatSenderContact-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatSenderContact-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_doc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_doc' is used in nib 'ChatSenderDocument-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatSenderDocument-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_playBtn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_playBtn' is used in nib 'ChatSenderImage-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatSenderImage-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ChatSenderSticker-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'Chats-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cancel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cancel' is used in nib 'CreateGroup-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'FindFriends-CollectionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in nib 'FindFriendsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close' is used in nib 'FollowRequestCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "science", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'science' is used in nib 'FollowRequestCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "tick", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tick' is used in nib 'FollowRequestCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'Followings-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "science", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'science' is used in nib 'FriendRequestCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'FriendsTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_checkbox", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_checkbox' is used in nib 'GeneralTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_setting_rightArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_setting_rightArrow' is used in nib 'GeneralTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color-3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-3' is used in nib 'GeneralTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TableVIew", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TableVIew' is used in nib 'GeneralTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "settingView", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'settingView' is used in nib 'GeneralTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imageView:laX-rJ-KFU:image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imageView:laX-rJ-KFU:image' is used in nib 'GifCollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'Group-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'GroupAddParticipantsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cancle_group_user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cancle_group_user' is used in nib 'GroupAddParticipantsCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_rocket", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_rocket' is used in nib 'GroupParticipentCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_rocket", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_rocket' is used in nib 'IntroItemView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'InviteFriends-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'LeftAudioTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "mic.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'mic.fill' is used in nib 'LeftAudioTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "play", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'play' is used in nib 'LeftAudioTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'LeftAudioTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'LeftContactTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.circle.fill' is used in nib 'LeftContactTableViewCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'LeftContactTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'LeftDocumentTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_doc_right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_doc_right' is used in nib 'LeftDocumentTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'LeftDocumentTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'LeftGiftTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'LeftGiftTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'LeftImageTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'image' is used in nib 'LeftImageTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'LeftImageTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'LeftLocationTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'LeftLocationTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'LeftTextTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'LeftTextTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'LeftVidoeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "play", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'play' is used in nib 'LeftVidoeTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'LeftVidoeTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close' is used in nib 'ManageSessionTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-1' is used in nib 'ManageSessionTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'MapViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'MapViewReceiveCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "science", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'science' is used in nib 'ProductTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ProductTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'ReplyChatSenderTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close' is used in nib 'RequestCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_check_setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_check_setting' is used in nib 'RequestCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_checkblack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_checkblack' is used in nib 'RequestGroupOne-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_cross", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cross' is used in nib 'RequestGroupOne-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'RightAudioTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_play 1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_play 1' is used in nib 'RightAudioTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "mic.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'mic.fill' is used in nib 'RightAudioTableViewCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'RightAudioTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "chat default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chat default' is used in nib 'RightAudioTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_seenCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_seenCheck' is used in nib 'RightContactTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.circle.fill' is used in nib 'RightContactTableViewCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'RightContactTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "chat default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chat default' is used in nib 'RightContactTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "doc.text") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'doc.text' is used in nib 'RightDocumentTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "ic_seenCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_seenCheck' is used in nib 'RightDocumentTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'RightDocumentTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "chat default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chat default' is used in nib 'RightDocumentTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_seenCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_seenCheck' is used in nib 'RightGiftTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'RightGiftTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "chat default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chat default' is used in nib 'RightGiftTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_seenCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_seenCheck' is used in nib 'RightImageTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'image' is used in nib 'RightImageTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'RightImageTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "chat default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chat default' is used in nib 'RightImageTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'RightLocationTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "chat default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chat default' is used in nib 'RightLocationTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_seenCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_seenCheck' is used in nib 'RightTextTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in nib 'RightTextTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "chat default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chat default' is used in nib 'RightTextTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_play 1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_play 1' is used in nib 'RightVidoeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_seenCheck", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_seenCheck' is used in nib 'RightVidoeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'RightVidoeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "chat default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chat default' is used in nib 'RightVidoeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'SearchRandom-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_callIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_callIcon' is used in nib 'SelectContact-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'SelectContact-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_videoBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_videoBlack' is used in nib 'SelectContact-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_radio_off", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_radio_off' is used in nib 'SelectLanguage-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_uncheck_red", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheck_red' is used in nib 'SettingSectionFourTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'Stories-TableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in nib 'StorySectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'StorySectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color-3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-3' is used in nib 'StorySectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_bigCamera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_bigCamera' is used in nib 'StorySectionThreeTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Color-3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-3' is used in nib 'StorySectionThreeTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'UserListChatCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_Offline", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Offline' is used in nib 'UserListChatCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "pin.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'pin.fill' is used in nib 'UserListChatCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "volume.slash.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'volume.slash.fill' is used in nib 'UserListChatCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "Color-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-1' is used in nib 'UserListChatCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in nib 'UserListChatCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextLiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextLiteColor' is used in nib 'UserListChatCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "camera.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'camera.fill' is used in nib 'UserProfileTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in nib 'UserProfileTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_userProfile_DownArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_userProfile_DownArrow' is used in nib 'UserProfileTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in nib 'UserProfileTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "settingView", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'settingView' is used in nib 'UserProfileTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in nib 'UserSuggestionCollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'star' is used in nib 'replyReceiverTableItem', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 52 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `AddParticipant_CollectionCell`.
    let addParticipant_CollectionCell: RswiftResources.ReuseIdentifier<AddParticipant_CollectionCell> = .init(identifier: "AddParticipant_CollectionCell")

    /// Reuse identifier `AddParticipants_TableCell`.
    let addParticipants_TableCell: RswiftResources.ReuseIdentifier<AddParticipants_TableCell> = .init(identifier: "AddParticipants_TableCell")

    /// Reuse identifier `addParticipentCell`.
    let addParticipentCell: RswiftResources.ReuseIdentifier<AddParticipantCell> = .init(identifier: "addParticipentCell")

    /// Reuse identifier `BlockedUsers_TableCell`.
    let blockedUsers_TableCell: RswiftResources.ReuseIdentifier<BlockedUsers_TableCell> = .init(identifier: "BlockedUsers_TableCell")

    /// Reuse identifier `Calls_TableCell`.
    let calls_TableCell: RswiftResources.ReuseIdentifier<Calls_TableCell> = .init(identifier: "Calls_TableCell")

    /// Reuse identifier `cell`.
    let cell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "cell")

    /// Reuse identifier `ChatInfoTableItem`.
    let chatInfoTableItem: RswiftResources.ReuseIdentifier<ChatInfoTableItem> = .init(identifier: "ChatInfoTableItem")

    /// Reuse identifier `ChatReceiverAudio_TableCell`.
    let chatReceiverAudio_TableCell: RswiftResources.ReuseIdentifier<ChatReceiverAudio_TableCell> = .init(identifier: "ChatReceiverAudio_TableCell")

    /// Reuse identifier `ChatReceiverContact_TableCell`.
    let chatReceiverContact_TableCell: RswiftResources.ReuseIdentifier<ChatReceiverContact_TableCell> = .init(identifier: "ChatReceiverContact_TableCell")

    /// Reuse identifier `ChatReceiverDocument_TableCell`.
    let chatReceiverDocument_TableCell: RswiftResources.ReuseIdentifier<ChatReceiverDocument_TableCell> = .init(identifier: "ChatReceiverDocument_TableCell")

    /// Reuse identifier `ChatReceiverImage_TableCell`.
    let chatReceiverImage_TableCell: RswiftResources.ReuseIdentifier<ChatReceiverImage_TableCell> = .init(identifier: "ChatReceiverImage_TableCell")

    /// Reuse identifier `ChatReceiverStricker_TableCell`.
    let chatReceiverStricker_TableCell: RswiftResources.ReuseIdentifier<ChatReceiverStricker_TableCell> = .init(identifier: "ChatReceiverStricker_TableCell")

    /// Reuse identifier `ChatReceiver_TableCell`.
    let chatReceiver_TableCell: RswiftResources.ReuseIdentifier<ChatReceiver_TableCell> = .init(identifier: "ChatReceiver_TableCell")

    /// Reuse identifier `ChatSenderAudio_TableCell`.
    let chatSenderAudio_TableCell: RswiftResources.ReuseIdentifier<ChatSenderAudio_TableCell> = .init(identifier: "ChatSenderAudio_TableCell")

    /// Reuse identifier `ChatSenderContact_TableCell`.
    let chatSenderContact_TableCell: RswiftResources.ReuseIdentifier<ChatSenderContact_TableCell> = .init(identifier: "ChatSenderContact_TableCell")

    /// Reuse identifier `ChatSenderDocument_TableCell`.
    let chatSenderDocument_TableCell: RswiftResources.ReuseIdentifier<ChatSenderDocument_TableCell> = .init(identifier: "ChatSenderDocument_TableCell")

    /// Reuse identifier `ChatSenderImage_TableCell`.
    let chatSenderImage_TableCell: RswiftResources.ReuseIdentifier<ChatSenderImage_TableCell> = .init(identifier: "ChatSenderImage_TableCell")

    /// Reuse identifier `ChatSenderSticker_TableCel`.
    let chatSenderSticker_TableCel: RswiftResources.ReuseIdentifier<ChatSenderSticker_TableCell> = .init(identifier: "ChatSenderSticker_TableCel")

    /// Reuse identifier `ChatSender_TableCell`.
    let chatSender_TableCell: RswiftResources.ReuseIdentifier<ChatSender_TableCell> = .init(identifier: "ChatSender_TableCell")

    /// Reuse identifier `Chats_TableCell`.
    let chats_TableCell: RswiftResources.ReuseIdentifier<Chats_TableCell> = .init(identifier: "Chats_TableCell")

    /// Reuse identifier `ColorCollectionItem`.
    let colorCollectionItem: RswiftResources.ReuseIdentifier<ColorCollectionItem> = .init(identifier: "ColorCollectionItem")

    /// Reuse identifier `CreateGroup_CollectionCell`.
    let createGroup_CollectionCell: RswiftResources.ReuseIdentifier<CreateGroup_CollectionCell> = .init(identifier: "CreateGroup_CollectionCell")

    /// Reuse identifier `FindFriends_CollectionCell`.
    let findFriends_CollectionCell: RswiftResources.ReuseIdentifier<FindFriends_CollectionCell> = .init(identifier: "FindFriends_CollectionCell")

    /// Reuse identifier `Followings_TableCell`.
    let followings_TableCell: RswiftResources.ReuseIdentifier<Followings_TableCell> = .init(identifier: "Followings_TableCell")

    /// Reuse identifier `FontCollectionItem`.
    let fontCollectionItem: RswiftResources.ReuseIdentifier<FontCollectionItem> = .init(identifier: "FontCollectionItem")

    /// Reuse identifier `FriendRequestcell`.
    let friendRequestcell: RswiftResources.ReuseIdentifier<FriendRequestCell> = .init(identifier: "FriendRequestcell")

    /// Reuse identifier `FriendsTableItem`.
    let friendsTableItem: RswiftResources.ReuseIdentifier<FriendsTableItem> = .init(identifier: "FriendsTableItem")

    /// Reuse identifier `GifCollectionCell`.
    let gifCollectionCell: RswiftResources.ReuseIdentifier<GifCollectionCell> = .init(identifier: "GifCollectionCell")

    /// Reuse identifier `GroupParticipantcell`.
    let groupParticipantcell: RswiftResources.ReuseIdentifier<GroupParticipentCell> = .init(identifier: "GroupParticipantcell")

    /// Reuse identifier `GroupRequest_TableCell`.
    let groupRequest_TableCell: RswiftResources.ReuseIdentifier<GroupRequest_TableCell> = .init(identifier: "GroupRequest_TableCell")

    /// Reuse identifier `Group_TableCell`.
    let group_TableCell: RswiftResources.ReuseIdentifier<Group_TableCell> = .init(identifier: "Group_TableCell")

    /// Reuse identifier `InviteFriends_TableCell`.
    let inviteFriends_TableCell: RswiftResources.ReuseIdentifier<InviteFriends_TableCell> = .init(identifier: "InviteFriends_TableCell")

    /// Reuse identifier `ManageSessionTableItem`.
    let manageSessionTableItem: RswiftResources.ReuseIdentifier<ManageSessionTableItem> = .init(identifier: "ManageSessionTableItem")

    /// Reuse identifier `MediaCollectionViewCell`.
    let mediaCollectionViewCell: RswiftResources.ReuseIdentifier<MediaCollectionViewCell> = .init(identifier: "MediaCollectionViewCell")

    /// Reuse identifier `ProductCell`.
    let productCell: RswiftResources.ReuseIdentifier<ProductTableCell> = .init(identifier: "ProductCell")

    /// Reuse identifier `ReplyChatSenderTableItem`.
    let replyChatSenderTableItem: RswiftResources.ReuseIdentifier<ReplyChatSenderTableItem> = .init(identifier: "ReplyChatSenderTableItem")

    /// Reuse identifier `replyReceiverTableItem`.
    let replyReceiverTableItem: RswiftResources.ReuseIdentifier<replyReceiverTableItem> = .init(identifier: "replyReceiverTableItem")

    /// Reuse identifier `RequestCell`.
    let requestCell: RswiftResources.ReuseIdentifier<FollowRequestCell> = .init(identifier: "RequestCell")

    /// Reuse identifier `RequestGroupOne_TableCell`.
    let requestGroupOne_TableCell: RswiftResources.ReuseIdentifier<RequestGroupOne_TableCell> = .init(identifier: "RequestGroupOne_TableCell")

    /// Reuse identifier `SearchRandom_TableCell`.
    let searchRandom_TableCell: RswiftResources.ReuseIdentifier<SearchRandom_TableCell> = .init(identifier: "SearchRandom_TableCell")

    /// Reuse identifier `SelectCategory_TableCell`.
    let selectCategory_TableCell: RswiftResources.ReuseIdentifier<SelectCategory_TableCell> = .init(identifier: "SelectCategory_TableCell")

    /// Reuse identifier `SelectContact_TableCell`.
    let selectContact_TableCell: RswiftResources.ReuseIdentifier<SelectContact_TableCell> = .init(identifier: "SelectContact_TableCell")

    /// Reuse identifier `SelectLanguage_TableCell`.
    let selectLanguage_TableCell: RswiftResources.ReuseIdentifier<SelectLanguage_TableCell> = .init(identifier: "SelectLanguage_TableCell")

    /// Reuse identifier `SelectType_TableCell`.
    let selectType_TableCell: RswiftResources.ReuseIdentifier<SelectType_TableCell> = .init(identifier: "SelectType_TableCell")

    /// Reuse identifier `SettingSectionFourTableItem`.
    let settingSectionFourTableItem: RswiftResources.ReuseIdentifier<SettingSectionFourTableItem> = .init(identifier: "SettingSectionFourTableItem")

    /// Reuse identifier `SettingsSectionOneTableItem`.
    let settingsSectionOneTableItem: RswiftResources.ReuseIdentifier<SettingsSectionOneTableItem> = .init(identifier: "SettingsSectionOneTableItem")

    /// Reuse identifier `SettingsSectionThreeTableItem`.
    let settingsSectionThreeTableItem: RswiftResources.ReuseIdentifier<SettingsSectionThreeTableItem> = .init(identifier: "SettingsSectionThreeTableItem")

    /// Reuse identifier `SettingsSectionTwoTableItem`.
    let settingsSectionTwoTableItem: RswiftResources.ReuseIdentifier<SettingsSectionTwoTableItem> = .init(identifier: "SettingsSectionTwoTableItem")

    /// Reuse identifier `Stories_TableCell`.
    let stories_TableCell: RswiftResources.ReuseIdentifier<Stories_TableCell> = .init(identifier: "Stories_TableCell")

    /// Reuse identifier `StorySectionOneTableItem`.
    let storySectionOneTableItem: RswiftResources.ReuseIdentifier<StorySectionOneTableItem> = .init(identifier: "StorySectionOneTableItem")

    /// Reuse identifier `StorySectionThreeTableItem`.
    let storySectionThreeTableItem: RswiftResources.ReuseIdentifier<StorySectionThreeTableItem> = .init(identifier: "StorySectionThreeTableItem")

    /// Reuse identifier `UserSuggestionCollectionCell`.
    let userSuggestionCollectionCell: RswiftResources.ReuseIdentifier<UserSuggestionCollectionCell> = .init(identifier: "UserSuggestionCollectionCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var call: call { .init(bundle: bundle) }
    var chat: chat { .init(bundle: bundle) }
    var dashboard: dashboard { .init(bundle: bundle) }
    var favorite: favorite { .init(bundle: bundle) }
    var findFriends: findFriends { .init(bundle: bundle) }
    var group: group { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var settings: settings { .init(bundle: bundle) }
    var story: story { .init(bundle: bundle) }

    func call(bundle: Foundation.Bundle) -> call {
      .init(bundle: bundle)
    }
    func chat(bundle: Foundation.Bundle) -> chat {
      .init(bundle: bundle)
    }
    func dashboard(bundle: Foundation.Bundle) -> dashboard {
      .init(bundle: bundle)
    }
    func favorite(bundle: Foundation.Bundle) -> favorite {
      .init(bundle: bundle)
    }
    func findFriends(bundle: Foundation.Bundle) -> findFriends {
      .init(bundle: bundle)
    }
    func group(bundle: Foundation.Bundle) -> group {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func settings(bundle: Foundation.Bundle) -> settings {
      .init(bundle: bundle)
    }
    func story(bundle: Foundation.Bundle) -> story {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.call.validate()
      try self.chat.validate()
      try self.dashboard.validate()
      try self.favorite.validate()
      try self.findFriends.validate()
      try self.group.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.settings.validate()
      try self.story.validate()
    }


    /// Storyboard `Call`.
    struct call: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Call"

      var agoraCallNotificationPopupVC: RswiftResources.StoryboardViewControllerIdentifier<AgoraCallNotificationPopupVC> { .init(identifier: "AgoraCallNotificationPopupVC", storyboard: name, bundle: bundle) }
      var agoraCallVC: RswiftResources.StoryboardViewControllerIdentifier<AgoraCallVC> { .init(identifier: "AgoraCallVC", storyboard: name, bundle: bundle) }
      var twilloAudioCallVC: RswiftResources.StoryboardViewControllerIdentifier<TwilloAudioCallVC> { .init(identifier: "TwilloAudioCallVC", storyboard: name, bundle: bundle) }
      var twilloVideoCallVC: RswiftResources.StoryboardViewControllerIdentifier<TwilloVideoCallVC> { .init(identifier: "TwilloVideoCallVC", storyboard: name, bundle: bundle) }
      var videoCallVIewController: RswiftResources.StoryboardViewControllerIdentifier<VideoCallVIewController> { .init(identifier: "VideoCallVIewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "2DDC9EF0-E577-4567-9263-CE9E888F7DBC", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named '2DDC9EF0-E577-4567-9263-CE9E888F7DBC' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "D4FA3226-E444-4CF4-8168-A4E8DCF93484", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'D4FA3226-E444-4CF4-8168-A4E8DCF93484' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_endcall", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'btn_endcall' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_mute", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'btn_mute' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_mute_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'btn_mute_blue' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_speaker", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'btn_speaker' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_speaker_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'btn_speaker_blue' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:Euq-dS-Dk8:image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'button:Euq-dS-Dk8:image' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button:Iwy-0N-fxi:image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'button:Iwy-0N-fxi:image' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hangUpButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'hangUpButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_call_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_call_white' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "localVideoMutedBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'localVideoMutedBg' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "muteButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'muteButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "muteButtonSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'muteButtonSelected' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switchCameraButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'switchCameraButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switchCameraButtonSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'switchCameraButtonSelected' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMuteButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'videoMuteButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMuteButtonSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'videoMuteButtonSelected' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMutedIndicator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'videoMutedIndicator' is used in storyboard 'Call', but couldn't be loaded.") }
        if agoraCallNotificationPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'agoraCallNotificationPopupVC' could not be loaded from storyboard 'Call' as 'AgoraCallNotificationPopupVC'.") }
        if agoraCallVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'agoraCallVC' could not be loaded from storyboard 'Call' as 'AgoraCallVC'.") }
        if twilloAudioCallVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twilloAudioCallVC' could not be loaded from storyboard 'Call' as 'TwilloAudioCallVC'.") }
        if twilloVideoCallVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twilloVideoCallVC' could not be loaded from storyboard 'Call' as 'TwilloVideoCallVC'.") }
        if videoCallVIewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'videoCallVIewController' could not be loaded from storyboard 'Call' as 'VideoCallVIewController'.") }
      }
    }

    /// Storyboard `Chat`.
    struct chat: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Chat"

      var changerColorViewController: RswiftResources.StoryboardViewControllerIdentifier<ChangerColorViewController> { .init(identifier: "ChangerColorViewController", storyboard: name, bundle: bundle) }
      var chatBottomSiteViewController: RswiftResources.StoryboardViewControllerIdentifier<ChatBottomSiteViewController> { .init(identifier: "ChatBottomSiteViewController", storyboard: name, bundle: bundle) }
      var chatViewController: RswiftResources.StoryboardViewControllerIdentifier<ChatViewController> { .init(identifier: "ChatViewController", storyboard: name, bundle: bundle) }
      var gifVC: RswiftResources.StoryboardViewControllerIdentifier<GifVC> { .init(identifier: "GifVC", storyboard: name, bundle: bundle) }
      var groupBottomSiteViewController: RswiftResources.StoryboardViewControllerIdentifier<GroupBottomSiteViewController> { .init(identifier: "GroupBottomSiteViewController", storyboard: name, bundle: bundle) }
      var locationVC: RswiftResources.StoryboardViewControllerIdentifier<LocationVC> { .init(identifier: "LocationVC", storyboard: name, bundle: bundle) }
      var moreBottonViewController: RswiftResources.StoryboardViewControllerIdentifier<MoreBottonViewController> { .init(identifier: "MoreBottonViewController", storyboard: name, bundle: bundle) }
      var pinnedMessageVC: RswiftResources.StoryboardViewControllerIdentifier<PinnedMessageVC> { .init(identifier: "PinnedMessageVC", storyboard: name, bundle: bundle) }
      var selectTypeVC: RswiftResources.StoryboardViewControllerIdentifier<SelectTypeVC> { .init(identifier: "SelectTypeVC", storyboard: name, bundle: bundle) }
      var viewProfileVC: RswiftResources.StoryboardViewControllerIdentifier<ViewProfileVC> { .init(identifier: "ViewProfileVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowshape.turn.up.backward.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrowshape.turn.up.backward.fill' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowshape.turn.up.forward.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrowshape.turn.up.forward.fill' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "circle.grid.2x2.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'circle.grid.2x2.fill' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delete", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'delete' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Chat_Send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Chat_Send' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Chat_cancel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Chat_cancel' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Group_Back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Group_Back' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_New_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_New_back' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_New_delete", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_New_delete' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_callRed", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_callRed' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_More_df", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_More_df' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_Video_df", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_Video_df' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_call_df", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_call_df' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_def_emoji", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_def_emoji' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_globe", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_globe' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_list_home", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_list_home' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_magnifying_glass", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_magnifying_glass' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_male", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_male' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_marker", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_marker' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Camera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Camera' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Contect", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Contect' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Doc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Doc' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Location' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Music", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Music' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Sticker", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Sticker' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_gif", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_gif' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_photo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_photo' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_on", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_on' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_send' is used in storyboard 'Chat', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "info.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'info.circle.fill' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "mic.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'mic.fill' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "pin.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'pin.fill' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "plus", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'plus' is used in storyboard 'Chat', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star.fill' is used in storyboard 'Chat', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "chat default", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'chat default' is used in storyboard 'Chat', but couldn't be loaded.") }
        if changerColorViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'changerColorViewController' could not be loaded from storyboard 'Chat' as 'ChangerColorViewController'.") }
        if chatBottomSiteViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatBottomSiteViewController' could not be loaded from storyboard 'Chat' as 'ChatBottomSiteViewController'.") }
        if chatViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatViewController' could not be loaded from storyboard 'Chat' as 'ChatViewController'.") }
        if gifVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'gifVC' could not be loaded from storyboard 'Chat' as 'GifVC'.") }
        if groupBottomSiteViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'groupBottomSiteViewController' could not be loaded from storyboard 'Chat' as 'GroupBottomSiteViewController'.") }
        if locationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'locationVC' could not be loaded from storyboard 'Chat' as 'LocationVC'.") }
        if moreBottonViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'moreBottonViewController' could not be loaded from storyboard 'Chat' as 'MoreBottonViewController'.") }
        if pinnedMessageVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'pinnedMessageVC' could not be loaded from storyboard 'Chat' as 'PinnedMessageVC'.") }
        if selectTypeVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectTypeVC' could not be loaded from storyboard 'Chat' as 'SelectTypeVC'.") }
        if viewProfileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'viewProfileVC' could not be loaded from storyboard 'Chat' as 'ViewProfileVC'.") }
      }
    }

    /// Storyboard `Dashboard`.
    struct dashboard: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = MainNavigationViewController

      let bundle: Foundation.Bundle

      let name = "Dashboard"

      var blockedUsersPopupVC: RswiftResources.StoryboardViewControllerIdentifier<BlockedUsersPopupVC> { .init(identifier: "BlockedUsersPopupVC", storyboard: name, bundle: bundle) }
      var blockedUsersVC: RswiftResources.StoryboardViewControllerIdentifier<BlockedUsersVC> { .init(identifier: "BlockedUsersVC", storyboard: name, bundle: bundle) }
      var callHistroyViewController: RswiftResources.StoryboardViewControllerIdentifier<CallHistroyViewController> { .init(identifier: "CallHistroyViewController", storyboard: name, bundle: bundle) }
      var chatUserLIstViewController: RswiftResources.StoryboardViewControllerIdentifier<ChatUserLIstViewController> { .init(identifier: "ChatUserLIstViewController", storyboard: name, bundle: bundle) }
      var chatUserListBottomVC: RswiftResources.StoryboardViewControllerIdentifier<ChatUserListBottomVC> { .init(identifier: "ChatUserListBottomVC", storyboard: name, bundle: bundle) }
      var chatVC: RswiftResources.StoryboardViewControllerIdentifier<ChatVC> { .init(identifier: "ChatVC", storyboard: name, bundle: bundle) }
      var dashboardParentVC: RswiftResources.StoryboardViewControllerIdentifier<DashboardParentVC> { .init(identifier: "DashboardParentVC", storyboard: name, bundle: bundle) }
      var findFriendsViewController: RswiftResources.StoryboardViewControllerIdentifier<FindFriendsViewController> { .init(identifier: "FindFriendsViewController", storyboard: name, bundle: bundle) }
      var followRequestVC: RswiftResources.StoryboardViewControllerIdentifier<FollowRequestController> { .init(identifier: "FollowRequestVC", storyboard: name, bundle: bundle) }
      var followingVC: RswiftResources.StoryboardViewControllerIdentifier<FollowingVC> { .init(identifier: "FollowingVC", storyboard: name, bundle: bundle) }
      var groupListBottomViewController: RswiftResources.StoryboardViewControllerIdentifier<GroupListBottomViewController> { .init(identifier: "GroupListBottomViewController", storyboard: name, bundle: bundle) }
      var groupVC: RswiftResources.StoryboardViewControllerIdentifier<GroupVC> { .init(identifier: "GroupVC", storyboard: name, bundle: bundle) }
      var inviteFriendsVC: RswiftResources.StoryboardViewControllerIdentifier<InviteFriendsVC> { .init(identifier: "InviteFriendsVC", storyboard: name, bundle: bundle) }
      var mainNavigationViewController: RswiftResources.StoryboardViewControllerIdentifier<MainNavigationViewController> { .init(identifier: "MainNavigationViewController", storyboard: name, bundle: bundle) }
      var mainTabBarViewController: RswiftResources.StoryboardViewControllerIdentifier<MainTabBarViewController> { .init(identifier: "MainTabBarViewController", storyboard: name, bundle: bundle) }
      var mediaViewController: RswiftResources.StoryboardViewControllerIdentifier<MediaViewController> { .init(identifier: "MediaViewController", storyboard: name, bundle: bundle) }
      var requestViewController: RswiftResources.StoryboardViewControllerIdentifier<RequestViewController> { .init(identifier: "RequestViewController", storyboard: name, bundle: bundle) }
      var searchByVC: RswiftResources.StoryboardViewControllerIdentifier<SearchByVC> { .init(identifier: "SearchByVC", storyboard: name, bundle: bundle) }
      var searchFilterVC: RswiftResources.StoryboardViewControllerIdentifier<SearchFilterVC> { .init(identifier: "SearchFilterVC", storyboard: name, bundle: bundle) }
      var searchLocationVC: RswiftResources.StoryboardViewControllerIdentifier<SearchLocationVC> { .init(identifier: "SearchLocationVC", storyboard: name, bundle: bundle) }
      var searchRandomVC: RswiftResources.StoryboardViewControllerIdentifier<SearchRandomVC> { .init(identifier: "SearchRandomVC", storyboard: name, bundle: bundle) }
      var selectCategoryVC: RswiftResources.StoryboardViewControllerIdentifier<SelectCategoryVC> { .init(identifier: "SelectCategoryVC", storyboard: name, bundle: bundle) }
      var selectContactVC: RswiftResources.StoryboardViewControllerIdentifier<SelectContactVC> { .init(identifier: "SelectContactVC", storyboard: name, bundle: bundle) }
      var selectRandomPopupVC: RswiftResources.StoryboardViewControllerIdentifier<SelectRandomPopupVC> { .init(identifier: "SelectRandomPopupVC", storyboard: name, bundle: bundle) }
      var settingProfileViewController: RswiftResources.StoryboardViewControllerIdentifier<SettingProfileViewController> { .init(identifier: "SettingProfileViewController", storyboard: name, bundle: bundle) }
      var showImageVC: RswiftResources.StoryboardViewControllerIdentifier<ShowImageController> { .init(identifier: "ShowImageVC", storyboard: name, bundle: bundle) }
      var storiesVC: RswiftResources.StoryboardViewControllerIdentifier<StoriesVC> { .init(identifier: "StoriesVC", storyboard: name, bundle: bundle) }
      var storyViewController: RswiftResources.StoryboardViewControllerIdentifier<StoryViewController> { .init(identifier: "StoryViewController", storyboard: name, bundle: bundle) }
      var userProfileVC: RswiftResources.StoryboardViewControllerIdentifier<UserProfileViewController> { .init(identifier: "UserProfileVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Options", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Options' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Youtube", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Youtube' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.backward' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "bell") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'bell' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "block-user_setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'block-user_setting' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "bubble.right") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'bubble.right' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "camera.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'camera.fill' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "d-avatar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'd-avatar' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-cover", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'd-cover' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "ellipsis") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'ellipsis' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "facebook", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'facebook' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google-plus", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'google-plus' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Add_New_Tab", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Add_New_Tab' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Archive", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Archive' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Camera_Tab", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Camera_Tab' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Chat_Tab", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Chat_Tab' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Contect_Tab", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Contect_Tab' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Filter 1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Filter 1' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Group_Back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Group_Back' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Mute_chat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Mute_chat' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_NewSearch", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_NewSearch' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_NewUser", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_NewUser' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_New_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_New_back' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_New_locationpin", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_New_locationpin' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_New_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_New_more' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_No_User", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_No_User' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Profile_Heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Profile_Heart' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_UserProfile_Tab", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_UserProfile_Tab' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bigNoMessage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_bigNoMessage' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_blockedUsers", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_blockedUsers' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cancel' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_home", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_home' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_facebook_og", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_facebook_og' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_inta_og", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_inta_og' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_lock", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_lock' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logout_setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_logout_setting' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_male", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_male' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_nearBy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_nearBy' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_og_Twitter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_og_Twitter' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_og_vk", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_og_vk' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_og_youtube", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_og_youtube' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profie_gender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profie_gender' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_Call", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profile_Call' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_Location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profile_Location' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_book", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profile_book' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_read_chat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_read_chat' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sear", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_sear' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_send' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wlord_profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_wlord_profile' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wrok_profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_wrok_profile' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "info.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'info.circle.fill' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "instagram", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'instagram' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "left-arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'left-arrow' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "moreOption", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'moreOption' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.3") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.3' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.3.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'person.3.fill' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "phone.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'phone.fill' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "pin.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'pin.fill' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "sendes", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sendes' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tick", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tick' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'trash.fill' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "twitter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'twitter' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user12", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user12' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user_setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user_setting' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "video.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'video.fill' is used in storyboard 'Dashboard', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "vk", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'vk' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-1' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-2' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-3' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TableVIew", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TableVIew' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextLiteColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextLiteColor' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIColor(named: "ViewBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'ViewBG' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if blockedUsersPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'blockedUsersPopupVC' could not be loaded from storyboard 'Dashboard' as 'BlockedUsersPopupVC'.") }
        if blockedUsersVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'blockedUsersVC' could not be loaded from storyboard 'Dashboard' as 'BlockedUsersVC'.") }
        if callHistroyViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'callHistroyViewController' could not be loaded from storyboard 'Dashboard' as 'CallHistroyViewController'.") }
        if chatUserLIstViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatUserLIstViewController' could not be loaded from storyboard 'Dashboard' as 'ChatUserLIstViewController'.") }
        if chatUserListBottomVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatUserListBottomVC' could not be loaded from storyboard 'Dashboard' as 'ChatUserListBottomVC'.") }
        if chatVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Dashboard' as 'ChatVC'.") }
        if dashboardParentVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'dashboardParentVC' could not be loaded from storyboard 'Dashboard' as 'DashboardParentVC'.") }
        if findFriendsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'findFriendsViewController' could not be loaded from storyboard 'Dashboard' as 'FindFriendsViewController'.") }
        if followRequestVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'followRequestVC' could not be loaded from storyboard 'Dashboard' as 'FollowRequestController'.") }
        if followingVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'followingVC' could not be loaded from storyboard 'Dashboard' as 'FollowingVC'.") }
        if groupListBottomViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'groupListBottomViewController' could not be loaded from storyboard 'Dashboard' as 'GroupListBottomViewController'.") }
        if groupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'groupVC' could not be loaded from storyboard 'Dashboard' as 'GroupVC'.") }
        if inviteFriendsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'inviteFriendsVC' could not be loaded from storyboard 'Dashboard' as 'InviteFriendsVC'.") }
        if mainNavigationViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mainNavigationViewController' could not be loaded from storyboard 'Dashboard' as 'MainNavigationViewController'.") }
        if mainTabBarViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mainTabBarViewController' could not be loaded from storyboard 'Dashboard' as 'MainTabBarViewController'.") }
        if mediaViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mediaViewController' could not be loaded from storyboard 'Dashboard' as 'MediaViewController'.") }
        if requestViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'requestViewController' could not be loaded from storyboard 'Dashboard' as 'RequestViewController'.") }
        if searchByVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchByVC' could not be loaded from storyboard 'Dashboard' as 'SearchByVC'.") }
        if searchFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchFilterVC' could not be loaded from storyboard 'Dashboard' as 'SearchFilterVC'.") }
        if searchLocationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchLocationVC' could not be loaded from storyboard 'Dashboard' as 'SearchLocationVC'.") }
        if searchRandomVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchRandomVC' could not be loaded from storyboard 'Dashboard' as 'SearchRandomVC'.") }
        if selectCategoryVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectCategoryVC' could not be loaded from storyboard 'Dashboard' as 'SelectCategoryVC'.") }
        if selectContactVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectContactVC' could not be loaded from storyboard 'Dashboard' as 'SelectContactVC'.") }
        if selectRandomPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectRandomPopupVC' could not be loaded from storyboard 'Dashboard' as 'SelectRandomPopupVC'.") }
        if settingProfileViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingProfileViewController' could not be loaded from storyboard 'Dashboard' as 'SettingProfileViewController'.") }
        if showImageVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'showImageVC' could not be loaded from storyboard 'Dashboard' as 'ShowImageController'.") }
        if storiesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'storiesVC' could not be loaded from storyboard 'Dashboard' as 'StoriesVC'.") }
        if storyViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'storyViewController' could not be loaded from storyboard 'Dashboard' as 'StoryViewController'.") }
        if userProfileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userProfileVC' could not be loaded from storyboard 'Dashboard' as 'UserProfileViewController'.") }
      }
    }

    /// Storyboard `Favorite`.
    struct favorite: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Favorite"

      var chatInfoVC: RswiftResources.StoryboardViewControllerIdentifier<MessageInfoViewController> { .init(identifier: "ChatInfoVC", storyboard: name, bundle: bundle) }
      var favoriteVC: RswiftResources.StoryboardViewControllerIdentifier<FavoriteVC> { .init(identifier: "FavoriteVC", storyboard: name, bundle: bundle) }
      var getFriendVC: RswiftResources.StoryboardViewControllerIdentifier<getFriendVC> { .init(identifier: "getFriendVC", storyboard: name, bundle: bundle) }
      var groupChatInfoVC: RswiftResources.StoryboardViewControllerIdentifier<GroupChatInfoVC> { .init(identifier: "GroupChatInfoVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ic_New_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_New_back' is used in storyboard 'Favorite', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'star' is used in storyboard 'Favorite', but couldn't be loaded.") } }
        if chatInfoVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatInfoVC' could not be loaded from storyboard 'Favorite' as 'MessageInfoViewController'.") }
        if favoriteVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'favoriteVC' could not be loaded from storyboard 'Favorite' as 'FavoriteVC'.") }
        if groupChatInfoVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'groupChatInfoVC' could not be loaded from storyboard 'Favorite' as 'GroupChatInfoVC'.") }
        if getFriendVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'getFriendVC' could not be loaded from storyboard 'Favorite' as 'getFriendVC'.") }
      }
    }

    /// Storyboard `FindFriends`.
    struct findFriends: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "FindFriends"

      var filterVC: RswiftResources.StoryboardViewControllerIdentifier<FilterVC> { .init(identifier: "FilterVC", storyboard: name, bundle: bundle) }
      var findFriendsVC: RswiftResources.StoryboardViewControllerIdentifier<FindFriendsVC> { .init(identifier: "FindFriendsVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ic_blockedUsers", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_blockedUsers' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filterFind", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_filterFind' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_manFilter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_manFilter' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_personFilter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_personFilter' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_statusFilter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_statusFilter' is used in storyboard 'FindFriends', but couldn't be loaded.") }
        if filterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'filterVC' could not be loaded from storyboard 'FindFriends' as 'FilterVC'.") }
        if findFriendsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'findFriendsVC' could not be loaded from storyboard 'FindFriends' as 'FindFriendsVC'.") }
      }
    }

    /// Storyboard `Group`.
    struct group: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Group"

      var addParticipantsListViewController: RswiftResources.StoryboardViewControllerIdentifier<AddParticipantsListViewController> { .init(identifier: "AddParticipantsListViewController", storyboard: name, bundle: bundle) }
      var addParticipantsVC: RswiftResources.StoryboardViewControllerIdentifier<AddParticipantsVC> { .init(identifier: "AddParticipantsVC", storyboard: name, bundle: bundle) }
      var chatGroupViewController: RswiftResources.StoryboardViewControllerIdentifier<ChatGroupViewController> { .init(identifier: "ChatGroupViewController", storyboard: name, bundle: bundle) }
      var createGroupViewController: RswiftResources.StoryboardViewControllerIdentifier<CreateGroupViewController> { .init(identifier: "CreateGroupViewController", storyboard: name, bundle: bundle) }
      var groupBottomMoreVC: RswiftResources.StoryboardViewControllerIdentifier<GroupBottomMoreVC> { .init(identifier: "GroupBottomMoreVC", storyboard: name, bundle: bundle) }
      var groupInfoViewController: RswiftResources.StoryboardViewControllerIdentifier<GroupInfoViewController> { .init(identifier: "GroupInfoViewController", storyboard: name, bundle: bundle) }
      var groupRequestVC: RswiftResources.StoryboardViewControllerIdentifier<GroupRequestVC> { .init(identifier: "GroupRequestVC", storyboard: name, bundle: bundle) }
      var updateGroupVC: RswiftResources.StoryboardViewControllerIdentifier<UpdateGroupVC> { .init(identifier: "UpdateGroupVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'close' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dm_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dm_image' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Bottom_Profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Bottom_Profile' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Chat_Back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Chat_Back' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Chat_Media", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Chat_Media' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Chat_Send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Chat_Send' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Chat_Voice", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Chat_Voice' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Group_Back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Group_Back' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Group_Camera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Group_Camera' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Group_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Group_add' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_New_delete", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_New_delete' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_More_df", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_More_df' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_emoji", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_emoji' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_close_black' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_filter' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logout_setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_logout_setting' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Camera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Camera' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Contect", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Contect' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Doc", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Doc' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Location' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Music", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Music' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_Sticker", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_Sticker' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_gif", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_gif' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_media_photo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_media_photo' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_searchbig", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_searchbig' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_splash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'img_splash' is used in storyboard 'Group', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "info.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'info.circle.fill' is used in storyboard 'Group', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in storyboard 'Group', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-1' is used in storyboard 'Group', but couldn't be loaded.") }
        if addParticipantsListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'addParticipantsListViewController' could not be loaded from storyboard 'Group' as 'AddParticipantsListViewController'.") }
        if addParticipantsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'addParticipantsVC' could not be loaded from storyboard 'Group' as 'AddParticipantsVC'.") }
        if chatGroupViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatGroupViewController' could not be loaded from storyboard 'Group' as 'ChatGroupViewController'.") }
        if createGroupViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createGroupViewController' could not be loaded from storyboard 'Group' as 'CreateGroupViewController'.") }
        if groupBottomMoreVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'groupBottomMoreVC' could not be loaded from storyboard 'Group' as 'GroupBottomMoreVC'.") }
        if groupInfoViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'groupInfoViewController' could not be loaded from storyboard 'Group' as 'GroupInfoViewController'.") }
        if groupRequestVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'groupRequestVC' could not be loaded from storyboard 'Group' as 'GroupRequestVC'.") }
        if updateGroupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'updateGroupVC' could not be loaded from storyboard 'Group' as 'UpdateGroupVC'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "Splash Screen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Splash Screen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SplashScreenVC

      let bundle: Foundation.Bundle

      let name = "Main"

      var forgetPasswordVC: RswiftResources.StoryboardViewControllerIdentifier<ForgetPasswordVC> { .init(identifier: "ForgetPasswordVC", storyboard: name, bundle: bundle) }
      var introVC: RswiftResources.StoryboardViewControllerIdentifier<IntroVC> { .init(identifier: "IntroVC", storyboard: name, bundle: bundle) }
      var loginVC: RswiftResources.StoryboardViewControllerIdentifier<LoginVC> { .init(identifier: "LoginVC", storyboard: name, bundle: bundle) }
      var main: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "Main", storyboard: name, bundle: bundle) }
      var noInternetDialogVC: RswiftResources.StoryboardViewControllerIdentifier<NoInternetDialogVC> { .init(identifier: "NoInternetDialogVC", storyboard: name, bundle: bundle) }
      var securityPopupVC: RswiftResources.StoryboardViewControllerIdentifier<SecurityPopupVC> { .init(identifier: "SecurityPopupVC", storyboard: name, bundle: bundle) }
      var signUpVC: RswiftResources.StoryboardViewControllerIdentifier<SignUpVC> { .init(identifier: "SignUpVC", storyboard: name, bundle: bundle) }
      var splashScreenVC: RswiftResources.StoryboardViewControllerIdentifier<SplashScreenVC> { .init(identifier: "SplashScreenVC", storyboard: name, bundle: bundle) }
      var startVC: RswiftResources.StoryboardViewControllerIdentifier<StartVC> { .init(identifier: "StartVC", storyboard: name, bundle: bundle) }
      var twoFactorVerifyVC: RswiftResources.StoryboardViewControllerIdentifier<TwoFactorVerifyVC> { .init(identifier: "TwoFactorVerifyVC", storyboard: name, bundle: bundle) }
      var userSuggestionVC: RswiftResources.StoryboardViewControllerIdentifier<UserSuggestionVC> { .init(identifier: "UserSuggestionVC", storyboard: name, bundle: bundle) }
      var webViewVC: RswiftResources.StoryboardViewControllerIdentifier<WebViewVC> { .init(identifier: "WebViewVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Splash Screen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Splash Screen' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "apple.logo") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'apple.logo' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "first_activity_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'first_activity_image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Show_Password", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Show_Password' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_blockedUsers", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_blockedUsers' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checkbox", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_checkbox' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_emailBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_emailBlack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_facebook_og", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_facebook_og' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_google 1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_google 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_hide_Password", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_hide_Password' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profileimage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profileimage' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_redia", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_redia' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheckgey", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_uncheckgey' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_login", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'img_login' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "lock") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'lock' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twoFactor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'twoFactor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in storyboard 'Main', but couldn't be loaded.") }
        if forgetPasswordVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'forgetPasswordVC' could not be loaded from storyboard 'Main' as 'ForgetPasswordVC'.") }
        if introVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'introVC' could not be loaded from storyboard 'Main' as 'IntroVC'.") }
        if loginVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if main() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'main' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if noInternetDialogVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'noInternetDialogVC' could not be loaded from storyboard 'Main' as 'NoInternetDialogVC'.") }
        if securityPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'securityPopupVC' could not be loaded from storyboard 'Main' as 'SecurityPopupVC'.") }
        if signUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'signUpVC' could not be loaded from storyboard 'Main' as 'SignUpVC'.") }
        if splashScreenVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'splashScreenVC' could not be loaded from storyboard 'Main' as 'SplashScreenVC'.") }
        if startVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'startVC' could not be loaded from storyboard 'Main' as 'StartVC'.") }
        if twoFactorVerifyVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twoFactorVerifyVC' could not be loaded from storyboard 'Main' as 'TwoFactorVerifyVC'.") }
        if userSuggestionVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userSuggestionVC' could not be loaded from storyboard 'Main' as 'UserSuggestionVC'.") }
        if webViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'webViewVC' could not be loaded from storyboard 'Main' as 'WebViewVC'.") }
      }
    }

    /// Storyboard `Settings`.
    struct settings: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Settings"

      var aboutMeVC: RswiftResources.StoryboardViewControllerIdentifier<AboutMeVC> { .init(identifier: "AboutMeVC", storyboard: name, bundle: bundle) }
      var birthdayPopupVC: RswiftResources.StoryboardViewControllerIdentifier<BirthdayPopupVC> { .init(identifier: "BirthdayPopupVC", storyboard: name, bundle: bundle) }
      var brithdayPrivacyViewController: RswiftResources.StoryboardViewControllerIdentifier<BrithdayPrivacyViewController> { .init(identifier: "BrithdayPrivacyViewController", storyboard: name, bundle: bundle) }
      var changeLanguageVC: RswiftResources.StoryboardViewControllerIdentifier<ChangeLanguageVC> { .init(identifier: "ChangeLanguageVC", storyboard: name, bundle: bundle) }
      var changePasswordVC: RswiftResources.StoryboardViewControllerIdentifier<ChangePasswordVC> { .init(identifier: "ChangePasswordVC", storyboard: name, bundle: bundle) }
      var confirmationCodeVC: RswiftResources.StoryboardViewControllerIdentifier<ConfirmationCodeVC> { .init(identifier: "ConfirmationCodeVC", storyboard: name, bundle: bundle) }
      var deleteAccountVC: RswiftResources.StoryboardViewControllerIdentifier<DeleteAccountVC> { .init(identifier: "DeleteAccountVC", storyboard: name, bundle: bundle) }
      var editProfileViewController: RswiftResources.StoryboardViewControllerIdentifier<EditProfileViewController> { .init(identifier: "EditProfileViewController", storyboard: name, bundle: bundle) }
      var followPrivacyViewController: RswiftResources.StoryboardViewControllerIdentifier<FollowPrivacyViewController> { .init(identifier: "FollowPrivacyViewController", storyboard: name, bundle: bundle) }
      var genderViewController: RswiftResources.StoryboardViewControllerIdentifier<GenderViewController> { .init(identifier: "GenderViewController", storyboard: name, bundle: bundle) }
      var locationList: RswiftResources.StoryboardViewControllerIdentifier<LocationList> { .init(identifier: "LocationList", storyboard: name, bundle: bundle) }
      var locationSearchViewController: RswiftResources.StoryboardViewControllerIdentifier<LocationSearchViewController> { .init(identifier: "LocationSearchViewController", storyboard: name, bundle: bundle) }
      var logoutVC: RswiftResources.StoryboardViewControllerIdentifier<LogoutVC> { .init(identifier: "LogoutVC", storyboard: name, bundle: bundle) }
      var manageSessionVC: RswiftResources.StoryboardViewControllerIdentifier<ManageSessionVC> { .init(identifier: "ManageSessionVC", storyboard: name, bundle: bundle) }
      var messagePrivacyViewController: RswiftResources.StoryboardViewControllerIdentifier<MessagePrivacyViewController> { .init(identifier: "MessagePrivacyViewController", storyboard: name, bundle: bundle) }
      var myAccountVC: RswiftResources.StoryboardViewControllerIdentifier<MyAccountVC> { .init(identifier: "MyAccountVC", storyboard: name, bundle: bundle) }
      var relationshipViewController: RswiftResources.StoryboardViewControllerIdentifier<RelationshipViewController> { .init(identifier: "RelationshipViewController", storyboard: name, bundle: bundle) }
      var settingsSelectionPopupVC: RswiftResources.StoryboardViewControllerIdentifier<SettingsSelectionPopupVC> { .init(identifier: "SettingsSelectionPopupVC", storyboard: name, bundle: bundle) }
      var settingsVC: RswiftResources.StoryboardViewControllerIdentifier<SettingsVC> { .init(identifier: "SettingsVC", storyboard: name, bundle: bundle) }
      var themeViewController: RswiftResources.StoryboardViewControllerIdentifier<ThemeViewController> { .init(identifier: "ThemeViewController", storyboard: name, bundle: bundle) }
      var twoFactorUpdateVC: RswiftResources.StoryboardViewControllerIdentifier<TwoFactorUpdateVC> { .init(identifier: "TwoFactorUpdateVC", storyboard: name, bundle: bundle) }
      var twoFactorVC: RswiftResources.StoryboardViewControllerIdentifier<TwoFactorVC> { .init(identifier: "TwoFactorVC", storyboard: name, bundle: bundle) }
      var userProfilePreviewViewController: RswiftResources.StoryboardViewControllerIdentifier<UserProfilePreviewViewController> { .init(identifier: "UserProfilePreviewViewController", storyboard: name, bundle: bundle) }
      var wallpaperViewController: RswiftResources.StoryboardViewControllerIdentifier<WallpaperViewController> { .init(identifier: "WallpaperViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.clockwise") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.clockwise' is used in storyboard 'Settings', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "birthday-cake-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'birthday-cake-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "d-avatar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'd-avatar' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_New_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_New_back' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_No_images", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_No_images' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Profile_Heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Profile_Heart' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_camera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_camera' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_color_wall", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_color_wall' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_facebook_og", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_facebook_og' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_inta_og", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_inta_og' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_home", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_location_home' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_male", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_male' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_og_Twitter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_og_Twitter' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_og_vk", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_og_vk' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_og_youtube", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_og_youtube' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profie_gender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profie_gender' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_Call", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profile_Call' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_Location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profile_Location' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_profile_book", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profile_book' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radio_off", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_radio_off' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_translation_settings", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_translation_settings' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wlord_profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_wlord_profile' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_world_setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_world_setting' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wrok_profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_wrok_profile' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "photo.on.rectangle.angled") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'photo.on.rectangle.angled' is used in storyboard 'Settings', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "protection", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'protection' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'send-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'user' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Color-2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Color-2' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if aboutMeVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'aboutMeVC' could not be loaded from storyboard 'Settings' as 'AboutMeVC'.") }
        if birthdayPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'birthdayPopupVC' could not be loaded from storyboard 'Settings' as 'BirthdayPopupVC'.") }
        if brithdayPrivacyViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'brithdayPrivacyViewController' could not be loaded from storyboard 'Settings' as 'BrithdayPrivacyViewController'.") }
        if changeLanguageVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'changeLanguageVC' could not be loaded from storyboard 'Settings' as 'ChangeLanguageVC'.") }
        if changePasswordVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Settings' as 'ChangePasswordVC'.") }
        if confirmationCodeVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'confirmationCodeVC' could not be loaded from storyboard 'Settings' as 'ConfirmationCodeVC'.") }
        if deleteAccountVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'deleteAccountVC' could not be loaded from storyboard 'Settings' as 'DeleteAccountVC'.") }
        if editProfileViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editProfileViewController' could not be loaded from storyboard 'Settings' as 'EditProfileViewController'.") }
        if followPrivacyViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'followPrivacyViewController' could not be loaded from storyboard 'Settings' as 'FollowPrivacyViewController'.") }
        if genderViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'genderViewController' could not be loaded from storyboard 'Settings' as 'GenderViewController'.") }
        if locationList() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'locationList' could not be loaded from storyboard 'Settings' as 'LocationList'.") }
        if locationSearchViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'locationSearchViewController' could not be loaded from storyboard 'Settings' as 'LocationSearchViewController'.") }
        if logoutVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'logoutVC' could not be loaded from storyboard 'Settings' as 'LogoutVC'.") }
        if manageSessionVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'manageSessionVC' could not be loaded from storyboard 'Settings' as 'ManageSessionVC'.") }
        if messagePrivacyViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'messagePrivacyViewController' could not be loaded from storyboard 'Settings' as 'MessagePrivacyViewController'.") }
        if myAccountVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'myAccountVC' could not be loaded from storyboard 'Settings' as 'MyAccountVC'.") }
        if relationshipViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'relationshipViewController' could not be loaded from storyboard 'Settings' as 'RelationshipViewController'.") }
        if settingsSelectionPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsSelectionPopupVC' could not be loaded from storyboard 'Settings' as 'SettingsSelectionPopupVC'.") }
        if settingsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Settings' as 'SettingsVC'.") }
        if themeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'themeViewController' could not be loaded from storyboard 'Settings' as 'ThemeViewController'.") }
        if twoFactorUpdateVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twoFactorUpdateVC' could not be loaded from storyboard 'Settings' as 'TwoFactorUpdateVC'.") }
        if twoFactorVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twoFactorVC' could not be loaded from storyboard 'Settings' as 'TwoFactorVC'.") }
        if userProfilePreviewViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'userProfilePreviewViewController' could not be loaded from storyboard 'Settings' as 'UserProfilePreviewViewController'.") }
        if wallpaperViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'wallpaperViewController' could not be loaded from storyboard 'Settings' as 'WallpaperViewController'.") }
      }
    }

    /// Storyboard `Story`.
    struct story: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Story"

      var chageTextColorViewController: RswiftResources.StoryboardViewControllerIdentifier<ChageTextColorViewController> { .init(identifier: "ChageTextColorViewController", storyboard: name, bundle: bundle) }
      var contentVC: RswiftResources.StoryboardViewControllerIdentifier<ContentVC> { .init(identifier: "ContentVC", storyboard: name, bundle: bundle) }
      var createStoryTextVC: RswiftResources.StoryboardViewControllerIdentifier<CreateStoryTextViewController> { .init(identifier: "CreateStoryTextVC", storyboard: name, bundle: bundle) }
      var createStoryVC: RswiftResources.StoryboardViewControllerIdentifier<CreateStoryImageViewViewController> { .init(identifier: "CreateStoryVC", storyboard: name, bundle: bundle) }
      var pageViewController: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UIPageViewController> { .init(identifier: "PageViewController", storyboard: name, bundle: bundle) }
      var showStoryVC: RswiftResources.StoryboardViewControllerIdentifier<ShowStoryVC> { .init(identifier: "ShowStoryVC", storyboard: name, bundle: bundle) }
      var storyBottomViewController: RswiftResources.StoryboardViewControllerIdentifier<StoryBottomViewController> { .init(identifier: "StoryBottomViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ic_Chat_Theme", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Chat_Theme' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Group_Back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_Group_Back' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_back' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cancel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cancel' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_close_black' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_color' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_photo_setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_photo_setting' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_send", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_send' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_trash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_trash' is used in storyboard 'Story', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "video.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'video.fill' is used in storyboard 'Story', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "App", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'App' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextColor' is used in storyboard 'Story', but couldn't be loaded.") }
        if UIKit.UIColor(named: "ViewBG", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'ViewBG' is used in storyboard 'Story', but couldn't be loaded.") }
        if chageTextColorViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chageTextColorViewController' could not be loaded from storyboard 'Story' as 'ChageTextColorViewController'.") }
        if contentVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'contentVC' could not be loaded from storyboard 'Story' as 'ContentVC'.") }
        if createStoryTextVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createStoryTextVC' could not be loaded from storyboard 'Story' as 'CreateStoryTextViewController'.") }
        if createStoryVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'createStoryVC' could not be loaded from storyboard 'Story' as 'CreateStoryImageViewViewController'.") }
        if pageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'pageViewController' could not be loaded from storyboard 'Story' as 'UIKit.UIPageViewController'.") }
        if showStoryVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'showStoryVC' could not be loaded from storyboard 'Story' as 'ShowStoryVC'.") }
        if storyBottomViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'storyBottomViewController' could not be loaded from storyboard 'Story' as 'StoryBottomViewController'.") }
      }
    }
  }
}